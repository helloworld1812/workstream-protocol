// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/CountryCode.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fCountryCode_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fCountryCode_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fCountryCode_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fCountryCode_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fCountryCode_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace Workstream {
namespace Protocol {
namespace Common {

enum CountryCode : int {
  AF = 0,
  AX = 1,
  AL = 2,
  DZ = 3,
  AS = 4,
  AD = 5,
  AO = 6,
  AI = 7,
  AQ = 8,
  AG = 9,
  AR = 10,
  AM = 11,
  AW = 12,
  AU = 13,
  AT = 14,
  AZ = 15,
  BS = 16,
  BH = 17,
  BD = 18,
  BB = 19,
  BY = 20,
  BE = 21,
  BZ = 22,
  BJ = 23,
  BM = 24,
  BT = 25,
  BO = 26,
  BQ = 27,
  BA = 28,
  BW = 29,
  BV = 30,
  BR = 31,
  IO = 32,
  BN = 33,
  BG = 34,
  BF = 35,
  BI = 36,
  KH = 37,
  CM = 38,
  CA = 39,
  CV = 40,
  KY = 41,
  CF = 42,
  TD = 43,
  CL = 44,
  CN = 45,
  CX = 46,
  CC = 47,
  CO = 48,
  KM = 49,
  CG = 50,
  CD = 51,
  CK = 52,
  CR = 53,
  CI = 54,
  HR = 55,
  CU = 56,
  CW = 57,
  CY = 58,
  CZ = 59,
  DK = 60,
  DJ = 61,
  DM = 62,
  DO = 63,
  EC = 64,
  EG = 65,
  SV = 66,
  GQ = 67,
  ER = 68,
  EE = 69,
  ET = 70,
  FK = 71,
  FO = 72,
  FJ = 73,
  FI = 74,
  FR = 75,
  GF = 76,
  PF = 77,
  TF = 78,
  GA = 79,
  GM = 80,
  GE = 81,
  DE = 82,
  GH = 83,
  GI = 84,
  GR = 85,
  GL = 86,
  GD = 87,
  GP = 88,
  GU = 89,
  GT = 90,
  GG = 91,
  GN = 92,
  GW = 93,
  GY = 94,
  HT = 95,
  HM = 96,
  VA = 97,
  HN = 98,
  HK = 99,
  HU = 100,
  IS = 101,
  IN = 102,
  ID = 103,
  IR = 104,
  IQ = 105,
  IE = 106,
  IM = 107,
  IL = 108,
  IT = 109,
  JM = 110,
  JP = 111,
  JE = 112,
  JO = 113,
  KZ = 114,
  KE = 115,
  KI = 116,
  KP = 117,
  KR = 118,
  KW = 119,
  KG = 120,
  LA = 121,
  LV = 122,
  LB = 123,
  LS = 124,
  LR = 125,
  LY = 126,
  LI = 127,
  LT = 128,
  LU = 129,
  MO = 130,
  MK = 131,
  MG = 132,
  MW = 133,
  MY = 134,
  MV = 135,
  ML = 136,
  MT = 137,
  MH = 138,
  MQ = 139,
  MR = 140,
  MU = 141,
  YT = 142,
  MX = 143,
  FM = 144,
  MD = 145,
  MC = 146,
  MN = 147,
  ME = 148,
  MS = 149,
  MA = 150,
  MZ = 151,
  MM = 152,
  NA = 153,
  NR = 154,
  NP = 155,
  NL = 156,
  NC = 157,
  NZ = 158,
  NI = 159,
  NE = 160,
  NG = 161,
  NU = 162,
  NF = 163,
  MP = 164,
  NO = 165,
  OM = 166,
  PK = 167,
  PW = 168,
  PS = 169,
  PA = 170,
  PG = 171,
  PY = 172,
  PE = 173,
  PH = 174,
  PN = 175,
  PL = 176,
  PT = 177,
  PR = 178,
  QA = 179,
  RE = 180,
  RO = 181,
  RU = 182,
  RW = 183,
  BL = 184,
  SH = 185,
  KN = 186,
  LC = 187,
  MF = 188,
  PM = 189,
  VC = 190,
  WS = 191,
  SM = 192,
  ST = 193,
  SA = 194,
  SN = 195,
  RS = 196,
  SC = 197,
  SL = 198,
  SG = 199,
  SX = 200,
  SK = 201,
  SI = 202,
  SB = 203,
  SO = 204,
  ZA = 205,
  GS = 206,
  SS = 207,
  ES = 208,
  LK = 209,
  SD = 210,
  SR = 211,
  SJ = 212,
  SZ = 213,
  SE = 214,
  CH = 215,
  SY = 216,
  TW = 217,
  TJ = 218,
  TZ = 219,
  TH = 220,
  TL = 221,
  TG = 222,
  TK = 223,
  TO = 224,
  TT = 225,
  TN = 226,
  TR = 227,
  TM = 228,
  TC = 229,
  TV = 230,
  UG = 231,
  UA = 232,
  AE = 233,
  GB = 234,
  US = 235,
  UM = 236,
  UY = 237,
  UZ = 238,
  VU = 239,
  VE = 240,
  VN = 241,
  VG = 242,
  VI = 243,
  WF = 244,
  EH = 245,
  YE = 246,
  ZM = 247,
  ZW = 248,
  CountryCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CountryCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CountryCode_IsValid(int value);
constexpr CountryCode CountryCode_MIN = AF;
constexpr CountryCode CountryCode_MAX = ZW;
constexpr int CountryCode_ARRAYSIZE = CountryCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CountryCode_descriptor();
template<typename T>
inline const std::string& CountryCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CountryCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CountryCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CountryCode_descriptor(), enum_t_value);
}
inline bool CountryCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CountryCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CountryCode>(
    CountryCode_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Workstream::Protocol::Common::CountryCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Workstream::Protocol::Common::CountryCode>() {
  return ::Workstream::Protocol::Common::CountryCode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fCountryCode_2eproto
