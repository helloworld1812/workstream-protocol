// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Onboarding.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import <stdatomic.h>

#import "Onboarding.pbobjc.h"
#import "Common/Phone.pbobjc.h"
#import "Common/Address.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(Address);
GPBObjCClassDeclaration(EmergencyContact);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(Phone);

#pragma mark - OnboardingRoot

@implementation OnboardingRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - OnboardingRoot_FileDescriptor

static GPBFileDescriptor *OnboardingRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"Workstream.Protocol.Onboarding"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Enum MaritalStatus

GPBEnumDescriptor *MaritalStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Married\000Divorced\000Widowed\000NeverMarried\000Se"
        "parated\000";
    static const int32_t values[] = {
        MaritalStatus_Married,
        MaritalStatus_Divorced,
        MaritalStatus_Widowed,
        MaritalStatus_NeverMarried,
        MaritalStatus_Separated,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(MaritalStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:MaritalStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL MaritalStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case MaritalStatus_Married:
    case MaritalStatus_Divorced:
    case MaritalStatus_Widowed:
    case MaritalStatus_NeverMarried:
    case MaritalStatus_Separated:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - CompanyEvent

@implementation CompanyEvent

@dynamic uuid;
@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic name;
@dynamic status;

typedef struct CompanyEvent__storage_ {
  uint32_t _has_storage_[1];
  CompanyEvent_CompanyStatus status;
  NSString *uuid;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *name;
  int64_t id_p;
} CompanyEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyEvent_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompanyEvent__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyEvent_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CompanyEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = CompanyEvent_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CompanyEvent__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = CompanyEvent_FieldNumber_UpdatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CompanyEvent__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyEvent_FieldNumber_Name,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CompanyEvent__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = CompanyEvent_CompanyStatus_EnumDescriptor,
        .number = CompanyEvent_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CompanyEvent__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompanyEvent class]
                                     rootClass:[OnboardingRoot class]
                                          file:OnboardingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompanyEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CompanyEvent_Status_RawValue(CompanyEvent *message) {
  GPBDescriptor *descriptor = [CompanyEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompanyEvent_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCompanyEvent_Status_RawValue(CompanyEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [CompanyEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompanyEvent_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum CompanyEvent_CompanyStatus

GPBEnumDescriptor *CompanyEvent_CompanyStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Active\000Test\000Disabled\000Template\000";
    static const int32_t values[] = {
        CompanyEvent_CompanyStatus_Active,
        CompanyEvent_CompanyStatus_Test,
        CompanyEvent_CompanyStatus_Disabled,
        CompanyEvent_CompanyStatus_Template,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CompanyEvent_CompanyStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CompanyEvent_CompanyStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CompanyEvent_CompanyStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case CompanyEvent_CompanyStatus_Active:
    case CompanyEvent_CompanyStatus_Test:
    case CompanyEvent_CompanyStatus_Disabled:
    case CompanyEvent_CompanyStatus_Template:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - EmployeeEvent

@implementation EmployeeEvent

@dynamic uuid;
@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic companyId;

typedef struct EmployeeEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  int64_t id_p;
  int64_t companyId;
} EmployeeEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeEvent_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmployeeEvent__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeEvent_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmployeeEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EmployeeEvent_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmployeeEvent__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EmployeeEvent_FieldNumber_UpdatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmployeeEvent__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeEvent_FieldNumber_CompanyId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EmployeeEvent__storage_, companyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmployeeEvent class]
                                     rootClass:[OnboardingRoot class]
                                          file:OnboardingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmployeeEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CompanyStaffEvent

@implementation CompanyStaffEvent

@dynamic uuid;
@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic status;
@dynamic companyId;
@dynamic name;
@dynamic email;
@dynamic hasPhone, phone;

typedef struct CompanyStaffEvent__storage_ {
  uint32_t _has_storage_[1];
  CompanyStaffEvent_CompanyStaffStatus status;
  NSString *uuid;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *name;
  NSString *email;
  Phone *phone;
  int64_t id_p;
  int64_t companyId;
} CompanyStaffEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyStaffEvent_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyStaffEvent_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = CompanyStaffEvent_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = CompanyStaffEvent_FieldNumber_UpdatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = CompanyStaffEvent_CompanyStaffStatus_EnumDescriptor,
        .number = CompanyStaffEvent_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyStaffEvent_FieldNumber_CompanyId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, companyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "name",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyStaffEvent_FieldNumber_Name,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, name),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = CompanyStaffEvent_FieldNumber_Email,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "phone",
        .dataTypeSpecific.clazz = GPBObjCClass(Phone),
        .number = CompanyStaffEvent_FieldNumber_Phone,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(CompanyStaffEvent__storage_, phone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompanyStaffEvent class]
                                     rootClass:[OnboardingRoot class]
                                          file:OnboardingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompanyStaffEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CompanyStaffEvent_Status_RawValue(CompanyStaffEvent *message) {
  GPBDescriptor *descriptor = [CompanyStaffEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompanyStaffEvent_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCompanyStaffEvent_Status_RawValue(CompanyStaffEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [CompanyStaffEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompanyStaffEvent_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - Enum CompanyStaffEvent_CompanyStaffStatus

GPBEnumDescriptor *CompanyStaffEvent_CompanyStaffStatus_EnumDescriptor(void) {
  static _Atomic(GPBEnumDescriptor*) descriptor = nil;
  if (!descriptor) {
    static const char *valueNames =
        "Active\000Disabled\000";
    static const int32_t values[] = {
        CompanyStaffEvent_CompanyStaffStatus_Active,
        CompanyStaffEvent_CompanyStaffStatus_Disabled,
    };
    GPBEnumDescriptor *worker =
        [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(CompanyStaffEvent_CompanyStaffStatus)
                                       valueNames:valueNames
                                           values:values
                                            count:(uint32_t)(sizeof(values) / sizeof(int32_t))
                                     enumVerifier:CompanyStaffEvent_CompanyStaffStatus_IsValidValue];
    GPBEnumDescriptor *expected = nil;
    if (!atomic_compare_exchange_strong(&descriptor, &expected, worker)) {
      [worker release];
    }
  }
  return descriptor;
}

BOOL CompanyStaffEvent_CompanyStaffStatus_IsValidValue(int32_t value__) {
  switch (value__) {
    case CompanyStaffEvent_CompanyStaffStatus_Active:
    case CompanyStaffEvent_CompanyStaffStatus_Disabled:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - EmergencyContact

@implementation EmergencyContact

@dynamic relationship;
@dynamic firstName;
@dynamic lastName;
@dynamic homePhone;
@dynamic workPhone;
@dynamic email;
@dynamic hasAddress, address;

typedef struct EmergencyContact__storage_ {
  uint32_t _has_storage_[1];
  NSString *relationship;
  NSString *firstName;
  NSString *lastName;
  NSString *homePhone;
  NSString *workPhone;
  NSString *email;
  Address *address;
} EmergencyContact__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "relationship",
        .dataTypeSpecific.clazz = Nil,
        .number = EmergencyContact_FieldNumber_Relationship,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, relationship),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmergencyContact_FieldNumber_FirstName,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, firstName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmergencyContact_FieldNumber_LastName,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, lastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "homePhone",
        .dataTypeSpecific.clazz = Nil,
        .number = EmergencyContact_FieldNumber_HomePhone,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, homePhone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workPhone",
        .dataTypeSpecific.clazz = Nil,
        .number = EmergencyContact_FieldNumber_WorkPhone,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, workPhone),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "email",
        .dataTypeSpecific.clazz = Nil,
        .number = EmergencyContact_FieldNumber_Email,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, email),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "address",
        .dataTypeSpecific.clazz = GPBObjCClass(Address),
        .number = EmergencyContact_FieldNumber_Address,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EmergencyContact__storage_, address),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmergencyContact class]
                                     rootClass:[OnboardingRoot class]
                                          file:OnboardingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmergencyContact__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmployeeInformationEvent

@implementation EmployeeInformationEvent

@dynamic uuid;
@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic companyId;
@dynamic employeeId;
@dynamic firstName;
@dynamic middleName;
@dynamic lastName;
@dynamic priorLastName;
@dynamic preferedName;
@dynamic salutation;
@dynamic ethnicity;
@dynamic gender;
@dynamic maritalStatus;
@dynamic ssn;
@dynamic smoker;
@dynamic nationality;
@dynamic dateOfBirth;
@dynamic homeEmail;
@dynamic hasHomePhone, homePhone;
@dynamic hasHomeAddress, homeAddress;
@dynamic workLocationName;
@dynamic workEmail;
@dynamic hasWorkPhone, workPhone;
@dynamic hasWorkAddress, workAddress;
@dynamic emergencyContactArray, emergencyContactArray_Count;
@dynamic applyDate;
@dynamic hireDate;
@dynamic startDate;
@dynamic terminationDate;
@dynamic jobTitle;
@dynamic departmentName;

typedef struct EmployeeInformationEvent__storage_ {
  uint32_t _has_storage_[2];
  MaritalStatus maritalStatus;
  NSString *uuid;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *firstName;
  NSString *middleName;
  NSString *lastName;
  NSString *priorLastName;
  NSString *preferedName;
  NSString *salutation;
  NSString *ethnicity;
  NSString *gender;
  NSString *ssn;
  NSString *nationality;
  NSString *dateOfBirth;
  NSString *homeEmail;
  Phone *homePhone;
  Address *homeAddress;
  NSString *workLocationName;
  NSString *workEmail;
  Phone *workPhone;
  Address *workAddress;
  NSMutableArray *emergencyContactArray;
  NSString *applyDate;
  NSString *hireDate;
  NSString *startDate;
  NSString *terminationDate;
  NSString *jobTitle;
  NSString *departmentName;
  int64_t id_p;
  int64_t companyId;
  int64_t employeeId;
} EmployeeInformationEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EmployeeInformationEvent_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EmployeeInformationEvent_FieldNumber_UpdatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "companyId",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_CompanyId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, companyId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "employeeId",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_EmployeeId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, employeeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_FirstName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, firstName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "middleName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_MiddleName,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, middleName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_LastName,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, lastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "priorLastName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_PriorLastName,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, priorLastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "preferedName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_PreferedName,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, preferedName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "salutation",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Salutation,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, salutation),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "ethnicity",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Ethnicity,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, ethnicity),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "gender",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Gender,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, gender),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "maritalStatus",
        .dataTypeSpecific.enumDescFunc = MaritalStatus_EnumDescriptor,
        .number = EmployeeInformationEvent_FieldNumber_MaritalStatus,
        .hasIndex = 14,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, maritalStatus),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "ssn",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Ssn,
        .hasIndex = 15,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, ssn),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "smoker",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Smoker,
        .hasIndex = 16,
        .offset = 17,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "nationality",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_Nationality,
        .hasIndex = 18,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, nationality),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "dateOfBirth",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_DateOfBirth,
        .hasIndex = 19,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, dateOfBirth),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "homeEmail",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_HomeEmail,
        .hasIndex = 20,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, homeEmail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "homePhone",
        .dataTypeSpecific.clazz = GPBObjCClass(Phone),
        .number = EmployeeInformationEvent_FieldNumber_HomePhone,
        .hasIndex = 21,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, homePhone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "homeAddress",
        .dataTypeSpecific.clazz = GPBObjCClass(Address),
        .number = EmployeeInformationEvent_FieldNumber_HomeAddress,
        .hasIndex = 22,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, homeAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workLocationName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_WorkLocationName,
        .hasIndex = 23,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, workLocationName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workEmail",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_WorkEmail,
        .hasIndex = 24,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, workEmail),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workPhone",
        .dataTypeSpecific.clazz = GPBObjCClass(Phone),
        .number = EmployeeInformationEvent_FieldNumber_WorkPhone,
        .hasIndex = 25,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, workPhone),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workAddress",
        .dataTypeSpecific.clazz = GPBObjCClass(Address),
        .number = EmployeeInformationEvent_FieldNumber_WorkAddress,
        .hasIndex = 26,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, workAddress),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "emergencyContactArray",
        .dataTypeSpecific.clazz = GPBObjCClass(EmergencyContact),
        .number = EmployeeInformationEvent_FieldNumber_EmergencyContactArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, emergencyContactArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "applyDate",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_ApplyDate,
        .hasIndex = 27,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, applyDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "hireDate",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_HireDate,
        .hasIndex = 28,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, hireDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startDate",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_StartDate,
        .hasIndex = 29,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, startDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "terminationDate",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_TerminationDate,
        .hasIndex = 30,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, terminationDate),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "jobTitle",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_JobTitle,
        .hasIndex = 31,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, jobTitle),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "departmentName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInformationEvent_FieldNumber_DepartmentName,
        .hasIndex = 32,
        .offset = (uint32_t)offsetof(EmployeeInformationEvent__storage_, departmentName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmployeeInformationEvent class]
                                     rootClass:[OnboardingRoot class]
                                          file:OnboardingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmployeeInformationEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t EmployeeInformationEvent_MaritalStatus_RawValue(EmployeeInformationEvent *message) {
  GPBDescriptor *descriptor = [EmployeeInformationEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EmployeeInformationEvent_FieldNumber_MaritalStatus];
  return GPBGetMessageRawEnumField(message, field);
}

void SetEmployeeInformationEvent_MaritalStatus_RawValue(EmployeeInformationEvent *message, int32_t value) {
  GPBDescriptor *descriptor = [EmployeeInformationEvent descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:EmployeeInformationEvent_FieldNumber_MaritalStatus];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - EmployeeInitialStateEvent

@implementation EmployeeInitialStateEvent

@dynamic uuid;
@dynamic id_p;
@dynamic hasCreatedAt, createdAt;
@dynamic hasUpdatedAt, updatedAt;
@dynamic employeeId;
@dynamic firstName;
@dynamic lastName;

typedef struct EmployeeInitialStateEvent__storage_ {
  uint32_t _has_storage_[1];
  NSString *uuid;
  GPBTimestamp *createdAt;
  GPBTimestamp *updatedAt;
  NSString *firstName;
  NSString *lastName;
  int64_t id_p;
  int64_t employeeId;
} EmployeeInitialStateEvent__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "uuid",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInitialStateEvent_FieldNumber_Uuid,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, uuid),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "id_p",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInitialStateEvent_FieldNumber_Id_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, id_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EmployeeInitialStateEvent_FieldNumber_CreatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = EmployeeInitialStateEvent_FieldNumber_UpdatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "employeeId",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInitialStateEvent_FieldNumber_EmployeeId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, employeeId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "firstName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInitialStateEvent_FieldNumber_FirstName,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, firstName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lastName",
        .dataTypeSpecific.clazz = Nil,
        .number = EmployeeInitialStateEvent_FieldNumber_LastName,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(EmployeeInitialStateEvent__storage_, lastName),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmployeeInitialStateEvent class]
                                     rootClass:[OnboardingRoot class]
                                          file:OnboardingRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(EmployeeInitialStateEvent__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
