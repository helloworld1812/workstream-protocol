// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/Phone.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fPhone_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fPhone_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fPhone_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fPhone_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fPhone_2eproto;
namespace Workstream {
namespace Protocol {
namespace Common {
class Phone;
class PhoneDefaultTypeInternal;
extern PhoneDefaultTypeInternal _Phone_default_instance_;
}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream
PROTOBUF_NAMESPACE_OPEN
template<> ::Workstream::Protocol::Common::Phone* Arena::CreateMaybeMessage<::Workstream::Protocol::Common::Phone>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Workstream {
namespace Protocol {
namespace Common {

// ===================================================================

class Phone PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Common.Phone) */ {
 public:
  inline Phone() : Phone(nullptr) {}
  virtual ~Phone();

  Phone(const Phone& from);
  Phone(Phone&& from) noexcept
    : Phone() {
    *this = ::std::move(from);
  }

  inline Phone& operator=(const Phone& from) {
    CopyFrom(from);
    return *this;
  }
  inline Phone& operator=(Phone&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Phone& default_instance();

  static inline const Phone* internal_default_instance() {
    return reinterpret_cast<const Phone*>(
               &_Phone_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Phone& a, Phone& b) {
    a.Swap(&b);
  }
  inline void Swap(Phone* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Phone* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Phone* New() const final {
    return CreateMaybeMessage<Phone>(nullptr);
  }

  Phone* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Phone>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Phone& from);
  void MergeFrom(const Phone& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Phone* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Common.Phone";
  }
  protected:
  explicit Phone(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fPhone_2eproto);
    return ::descriptor_table_Common_2fPhone_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountryCodeFieldNumber = 1,
    kNumberFieldNumber = 2,
    kExtensionFieldNumber = 3,
  };
  // string country_code = 1;
  void clear_country_code();
  const std::string& country_code() const;
  void set_country_code(const std::string& value);
  void set_country_code(std::string&& value);
  void set_country_code(const char* value);
  void set_country_code(const char* value, size_t size);
  std::string* mutable_country_code();
  std::string* release_country_code();
  void set_allocated_country_code(std::string* country_code);
  private:
  const std::string& _internal_country_code() const;
  void _internal_set_country_code(const std::string& value);
  std::string* _internal_mutable_country_code();
  public:

  // string number = 2;
  void clear_number();
  const std::string& number() const;
  void set_number(const std::string& value);
  void set_number(std::string&& value);
  void set_number(const char* value);
  void set_number(const char* value, size_t size);
  std::string* mutable_number();
  std::string* release_number();
  void set_allocated_number(std::string* number);
  private:
  const std::string& _internal_number() const;
  void _internal_set_number(const std::string& value);
  std::string* _internal_mutable_number();
  public:

  // string extension = 3;
  void clear_extension();
  const std::string& extension() const;
  void set_extension(const std::string& value);
  void set_extension(std::string&& value);
  void set_extension(const char* value);
  void set_extension(const char* value, size_t size);
  std::string* mutable_extension();
  std::string* release_extension();
  void set_allocated_extension(std::string* extension);
  private:
  const std::string& _internal_extension() const;
  void _internal_set_extension(const std::string& value);
  std::string* _internal_mutable_extension();
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Common.Phone)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extension_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fPhone_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Phone

// string country_code = 1;
inline void Phone::clear_country_code() {
  country_code_.ClearToEmpty();
}
inline const std::string& Phone::country_code() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Phone.country_code)
  return _internal_country_code();
}
inline void Phone::set_country_code(const std::string& value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Phone.country_code)
}
inline std::string* Phone::mutable_country_code() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Phone.country_code)
  return _internal_mutable_country_code();
}
inline const std::string& Phone::_internal_country_code() const {
  return country_code_.Get();
}
inline void Phone::_internal_set_country_code(const std::string& value) {
  
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Phone::set_country_code(std::string&& value) {
  
  country_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Phone.country_code)
}
inline void Phone::set_country_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Phone.country_code)
}
inline void Phone::set_country_code(const char* value,
    size_t size) {
  
  country_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Phone.country_code)
}
inline std::string* Phone::_internal_mutable_country_code() {
  
  return country_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Phone::release_country_code() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Phone.country_code)
  return country_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Phone::set_allocated_country_code(std::string* country_code) {
  if (country_code != nullptr) {
    
  } else {
    
  }
  country_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Phone.country_code)
}

// string number = 2;
inline void Phone::clear_number() {
  number_.ClearToEmpty();
}
inline const std::string& Phone::number() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Phone.number)
  return _internal_number();
}
inline void Phone::set_number(const std::string& value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Phone.number)
}
inline std::string* Phone::mutable_number() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Phone.number)
  return _internal_mutable_number();
}
inline const std::string& Phone::_internal_number() const {
  return number_.Get();
}
inline void Phone::_internal_set_number(const std::string& value) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Phone::set_number(std::string&& value) {
  
  number_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Phone.number)
}
inline void Phone::set_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Phone.number)
}
inline void Phone::set_number(const char* value,
    size_t size) {
  
  number_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Phone.number)
}
inline std::string* Phone::_internal_mutable_number() {
  
  return number_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Phone::release_number() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Phone.number)
  return number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Phone::set_allocated_number(std::string* number) {
  if (number != nullptr) {
    
  } else {
    
  }
  number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Phone.number)
}

// string extension = 3;
inline void Phone::clear_extension() {
  extension_.ClearToEmpty();
}
inline const std::string& Phone::extension() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Phone.extension)
  return _internal_extension();
}
inline void Phone::set_extension(const std::string& value) {
  _internal_set_extension(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Phone.extension)
}
inline std::string* Phone::mutable_extension() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Phone.extension)
  return _internal_mutable_extension();
}
inline const std::string& Phone::_internal_extension() const {
  return extension_.Get();
}
inline void Phone::_internal_set_extension(const std::string& value) {
  
  extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Phone::set_extension(std::string&& value) {
  
  extension_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Phone.extension)
}
inline void Phone::set_extension(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Phone.extension)
}
inline void Phone::set_extension(const char* value,
    size_t size) {
  
  extension_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Phone.extension)
}
inline std::string* Phone::_internal_mutable_extension() {
  
  return extension_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Phone::release_extension() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Phone.extension)
  return extension_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Phone::set_allocated_extension(std::string* extension) {
  if (extension != nullptr) {
    
  } else {
    
  }
  extension_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extension,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Phone.extension)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fPhone_2eproto
