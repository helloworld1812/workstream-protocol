// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/Address.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Common_2fAddress_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Common_2fAddress_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Common/CountryCode.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Common_2fAddress_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Common_2fAddress_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fAddress_2eproto;
namespace Workstream {
namespace Protocol {
namespace Common {
class Address;
class AddressDefaultTypeInternal;
extern AddressDefaultTypeInternal _Address_default_instance_;
}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream
PROTOBUF_NAMESPACE_OPEN
template<> ::Workstream::Protocol::Common::Address* Arena::CreateMaybeMessage<::Workstream::Protocol::Common::Address>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Workstream {
namespace Protocol {
namespace Common {

// ===================================================================

class Address PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Common.Address) */ {
 public:
  inline Address() : Address(nullptr) {}
  virtual ~Address();

  Address(const Address& from);
  Address(Address&& from) noexcept
    : Address() {
    *this = ::std::move(from);
  }

  inline Address& operator=(const Address& from) {
    CopyFrom(from);
    return *this;
  }
  inline Address& operator=(Address&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Address& default_instance();

  static inline const Address* internal_default_instance() {
    return reinterpret_cast<const Address*>(
               &_Address_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Address& a, Address& b) {
    a.Swap(&b);
  }
  inline void Swap(Address* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Address* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Address* New() const final {
    return CreateMaybeMessage<Address>(nullptr);
  }

  Address* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Address>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Address& from);
  void MergeFrom(const Address& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Address* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Common.Address";
  }
  protected:
  explicit Address(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Common_2fAddress_2eproto);
    return ::descriptor_table_Common_2fAddress_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddress1FieldNumber = 1,
    kAddress2FieldNumber = 2,
    kCityFieldNumber = 3,
    kCountyFieldNumber = 4,
    kCountrySubDivisionCodeFieldNumber = 19,
    kZipFieldNumber = 20,
    kCountryCodeFieldNumber = 21,
  };
  // string address1 = 1;
  void clear_address1();
  const std::string& address1() const;
  void set_address1(const std::string& value);
  void set_address1(std::string&& value);
  void set_address1(const char* value);
  void set_address1(const char* value, size_t size);
  std::string* mutable_address1();
  std::string* release_address1();
  void set_allocated_address1(std::string* address1);
  private:
  const std::string& _internal_address1() const;
  void _internal_set_address1(const std::string& value);
  std::string* _internal_mutable_address1();
  public:

  // string address2 = 2;
  void clear_address2();
  const std::string& address2() const;
  void set_address2(const std::string& value);
  void set_address2(std::string&& value);
  void set_address2(const char* value);
  void set_address2(const char* value, size_t size);
  std::string* mutable_address2();
  std::string* release_address2();
  void set_allocated_address2(std::string* address2);
  private:
  const std::string& _internal_address2() const;
  void _internal_set_address2(const std::string& value);
  std::string* _internal_mutable_address2();
  public:

  // string city = 3;
  void clear_city();
  const std::string& city() const;
  void set_city(const std::string& value);
  void set_city(std::string&& value);
  void set_city(const char* value);
  void set_city(const char* value, size_t size);
  std::string* mutable_city();
  std::string* release_city();
  void set_allocated_city(std::string* city);
  private:
  const std::string& _internal_city() const;
  void _internal_set_city(const std::string& value);
  std::string* _internal_mutable_city();
  public:

  // string county = 4;
  void clear_county();
  const std::string& county() const;
  void set_county(const std::string& value);
  void set_county(std::string&& value);
  void set_county(const char* value);
  void set_county(const char* value, size_t size);
  std::string* mutable_county();
  std::string* release_county();
  void set_allocated_county(std::string* county);
  private:
  const std::string& _internal_county() const;
  void _internal_set_county(const std::string& value);
  std::string* _internal_mutable_county();
  public:

  // string country_sub_division_code = 19;
  void clear_country_sub_division_code();
  const std::string& country_sub_division_code() const;
  void set_country_sub_division_code(const std::string& value);
  void set_country_sub_division_code(std::string&& value);
  void set_country_sub_division_code(const char* value);
  void set_country_sub_division_code(const char* value, size_t size);
  std::string* mutable_country_sub_division_code();
  std::string* release_country_sub_division_code();
  void set_allocated_country_sub_division_code(std::string* country_sub_division_code);
  private:
  const std::string& _internal_country_sub_division_code() const;
  void _internal_set_country_sub_division_code(const std::string& value);
  std::string* _internal_mutable_country_sub_division_code();
  public:

  // string zip = 20;
  void clear_zip();
  const std::string& zip() const;
  void set_zip(const std::string& value);
  void set_zip(std::string&& value);
  void set_zip(const char* value);
  void set_zip(const char* value, size_t size);
  std::string* mutable_zip();
  std::string* release_zip();
  void set_allocated_zip(std::string* zip);
  private:
  const std::string& _internal_zip() const;
  void _internal_set_zip(const std::string& value);
  std::string* _internal_mutable_zip();
  public:

  // .Workstream.Protocol.Common.CountryCode country_code = 21;
  void clear_country_code();
  ::Workstream::Protocol::Common::CountryCode country_code() const;
  void set_country_code(::Workstream::Protocol::Common::CountryCode value);
  private:
  ::Workstream::Protocol::Common::CountryCode _internal_country_code() const;
  void _internal_set_country_code(::Workstream::Protocol::Common::CountryCode value);
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Common.Address)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr city_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr county_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_sub_division_code_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zip_;
  int country_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Common_2fAddress_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Address

// string address1 = 1;
inline void Address::clear_address1() {
  address1_.ClearToEmpty();
}
inline const std::string& Address::address1() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.address1)
  return _internal_address1();
}
inline void Address::set_address1(const std::string& value) {
  _internal_set_address1(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.address1)
}
inline std::string* Address::mutable_address1() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Address.address1)
  return _internal_mutable_address1();
}
inline const std::string& Address::_internal_address1() const {
  return address1_.Get();
}
inline void Address::_internal_set_address1(const std::string& value) {
  
  address1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Address::set_address1(std::string&& value) {
  
  address1_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Address.address1)
}
inline void Address::set_address1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Address.address1)
}
inline void Address::set_address1(const char* value,
    size_t size) {
  
  address1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Address.address1)
}
inline std::string* Address::_internal_mutable_address1() {
  
  return address1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Address::release_address1() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Address.address1)
  return address1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_address1(std::string* address1) {
  if (address1 != nullptr) {
    
  } else {
    
  }
  address1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Address.address1)
}

// string address2 = 2;
inline void Address::clear_address2() {
  address2_.ClearToEmpty();
}
inline const std::string& Address::address2() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.address2)
  return _internal_address2();
}
inline void Address::set_address2(const std::string& value) {
  _internal_set_address2(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.address2)
}
inline std::string* Address::mutable_address2() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Address.address2)
  return _internal_mutable_address2();
}
inline const std::string& Address::_internal_address2() const {
  return address2_.Get();
}
inline void Address::_internal_set_address2(const std::string& value) {
  
  address2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Address::set_address2(std::string&& value) {
  
  address2_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Address.address2)
}
inline void Address::set_address2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  address2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Address.address2)
}
inline void Address::set_address2(const char* value,
    size_t size) {
  
  address2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Address.address2)
}
inline std::string* Address::_internal_mutable_address2() {
  
  return address2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Address::release_address2() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Address.address2)
  return address2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_address2(std::string* address2) {
  if (address2 != nullptr) {
    
  } else {
    
  }
  address2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Address.address2)
}

// string city = 3;
inline void Address::clear_city() {
  city_.ClearToEmpty();
}
inline const std::string& Address::city() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.city)
  return _internal_city();
}
inline void Address::set_city(const std::string& value) {
  _internal_set_city(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.city)
}
inline std::string* Address::mutable_city() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Address.city)
  return _internal_mutable_city();
}
inline const std::string& Address::_internal_city() const {
  return city_.Get();
}
inline void Address::_internal_set_city(const std::string& value) {
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Address::set_city(std::string&& value) {
  
  city_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Address.city)
}
inline void Address::set_city(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Address.city)
}
inline void Address::set_city(const char* value,
    size_t size) {
  
  city_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Address.city)
}
inline std::string* Address::_internal_mutable_city() {
  
  return city_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Address::release_city() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Address.city)
  return city_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_city(std::string* city) {
  if (city != nullptr) {
    
  } else {
    
  }
  city_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), city,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Address.city)
}

// string county = 4;
inline void Address::clear_county() {
  county_.ClearToEmpty();
}
inline const std::string& Address::county() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.county)
  return _internal_county();
}
inline void Address::set_county(const std::string& value) {
  _internal_set_county(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.county)
}
inline std::string* Address::mutable_county() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Address.county)
  return _internal_mutable_county();
}
inline const std::string& Address::_internal_county() const {
  return county_.Get();
}
inline void Address::_internal_set_county(const std::string& value) {
  
  county_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Address::set_county(std::string&& value) {
  
  county_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Address.county)
}
inline void Address::set_county(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  county_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Address.county)
}
inline void Address::set_county(const char* value,
    size_t size) {
  
  county_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Address.county)
}
inline std::string* Address::_internal_mutable_county() {
  
  return county_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Address::release_county() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Address.county)
  return county_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_county(std::string* county) {
  if (county != nullptr) {
    
  } else {
    
  }
  county_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), county,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Address.county)
}

// string zip = 20;
inline void Address::clear_zip() {
  zip_.ClearToEmpty();
}
inline const std::string& Address::zip() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.zip)
  return _internal_zip();
}
inline void Address::set_zip(const std::string& value) {
  _internal_set_zip(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.zip)
}
inline std::string* Address::mutable_zip() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Address.zip)
  return _internal_mutable_zip();
}
inline const std::string& Address::_internal_zip() const {
  return zip_.Get();
}
inline void Address::_internal_set_zip(const std::string& value) {
  
  zip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Address::set_zip(std::string&& value) {
  
  zip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Address.zip)
}
inline void Address::set_zip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Address.zip)
}
inline void Address::set_zip(const char* value,
    size_t size) {
  
  zip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Address.zip)
}
inline std::string* Address::_internal_mutable_zip() {
  
  return zip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Address::release_zip() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Address.zip)
  return zip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_zip(std::string* zip) {
  if (zip != nullptr) {
    
  } else {
    
  }
  zip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Address.zip)
}

// string country_sub_division_code = 19;
inline void Address::clear_country_sub_division_code() {
  country_sub_division_code_.ClearToEmpty();
}
inline const std::string& Address::country_sub_division_code() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.country_sub_division_code)
  return _internal_country_sub_division_code();
}
inline void Address::set_country_sub_division_code(const std::string& value) {
  _internal_set_country_sub_division_code(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.country_sub_division_code)
}
inline std::string* Address::mutable_country_sub_division_code() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Common.Address.country_sub_division_code)
  return _internal_mutable_country_sub_division_code();
}
inline const std::string& Address::_internal_country_sub_division_code() const {
  return country_sub_division_code_.Get();
}
inline void Address::_internal_set_country_sub_division_code(const std::string& value) {
  
  country_sub_division_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Address::set_country_sub_division_code(std::string&& value) {
  
  country_sub_division_code_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Common.Address.country_sub_division_code)
}
inline void Address::set_country_sub_division_code(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  country_sub_division_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Common.Address.country_sub_division_code)
}
inline void Address::set_country_sub_division_code(const char* value,
    size_t size) {
  
  country_sub_division_code_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Common.Address.country_sub_division_code)
}
inline std::string* Address::_internal_mutable_country_sub_division_code() {
  
  return country_sub_division_code_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Address::release_country_sub_division_code() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Common.Address.country_sub_division_code)
  return country_sub_division_code_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Address::set_allocated_country_sub_division_code(std::string* country_sub_division_code) {
  if (country_sub_division_code != nullptr) {
    
  } else {
    
  }
  country_sub_division_code_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country_sub_division_code,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Common.Address.country_sub_division_code)
}

// .Workstream.Protocol.Common.CountryCode country_code = 21;
inline void Address::clear_country_code() {
  country_code_ = 0;
}
inline ::Workstream::Protocol::Common::CountryCode Address::_internal_country_code() const {
  return static_cast< ::Workstream::Protocol::Common::CountryCode >(country_code_);
}
inline ::Workstream::Protocol::Common::CountryCode Address::country_code() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Common.Address.country_code)
  return _internal_country_code();
}
inline void Address::_internal_set_country_code(::Workstream::Protocol::Common::CountryCode value) {
  
  country_code_ = value;
}
inline void Address::set_country_code(::Workstream::Protocol::Common::CountryCode value) {
  _internal_set_country_code(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Common.Address.country_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Common_2fAddress_2eproto
