// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Onboarding.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Onboarding_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Onboarding_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common/Phone.pb.h"
#include "Common/Address.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Onboarding_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Onboarding_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Onboarding_2eproto;
namespace Workstream {
namespace Protocol {
namespace Onboarding {
class CompanyEvent;
class CompanyEventDefaultTypeInternal;
extern CompanyEventDefaultTypeInternal _CompanyEvent_default_instance_;
class CompanyStaffEvent;
class CompanyStaffEventDefaultTypeInternal;
extern CompanyStaffEventDefaultTypeInternal _CompanyStaffEvent_default_instance_;
class EmergencyContact;
class EmergencyContactDefaultTypeInternal;
extern EmergencyContactDefaultTypeInternal _EmergencyContact_default_instance_;
class EmployeeEvent;
class EmployeeEventDefaultTypeInternal;
extern EmployeeEventDefaultTypeInternal _EmployeeEvent_default_instance_;
class EmployeeInformationEvent;
class EmployeeInformationEventDefaultTypeInternal;
extern EmployeeInformationEventDefaultTypeInternal _EmployeeInformationEvent_default_instance_;
class EmployeeInitialStateEvent;
class EmployeeInitialStateEventDefaultTypeInternal;
extern EmployeeInitialStateEventDefaultTypeInternal _EmployeeInitialStateEvent_default_instance_;
}  // namespace Onboarding
}  // namespace Protocol
}  // namespace Workstream
PROTOBUF_NAMESPACE_OPEN
template<> ::Workstream::Protocol::Onboarding::CompanyEvent* Arena::CreateMaybeMessage<::Workstream::Protocol::Onboarding::CompanyEvent>(Arena*);
template<> ::Workstream::Protocol::Onboarding::CompanyStaffEvent* Arena::CreateMaybeMessage<::Workstream::Protocol::Onboarding::CompanyStaffEvent>(Arena*);
template<> ::Workstream::Protocol::Onboarding::EmergencyContact* Arena::CreateMaybeMessage<::Workstream::Protocol::Onboarding::EmergencyContact>(Arena*);
template<> ::Workstream::Protocol::Onboarding::EmployeeEvent* Arena::CreateMaybeMessage<::Workstream::Protocol::Onboarding::EmployeeEvent>(Arena*);
template<> ::Workstream::Protocol::Onboarding::EmployeeInformationEvent* Arena::CreateMaybeMessage<::Workstream::Protocol::Onboarding::EmployeeInformationEvent>(Arena*);
template<> ::Workstream::Protocol::Onboarding::EmployeeInitialStateEvent* Arena::CreateMaybeMessage<::Workstream::Protocol::Onboarding::EmployeeInitialStateEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Workstream {
namespace Protocol {
namespace Onboarding {

enum CompanyEvent_CompanyStatus : int {
  CompanyEvent_CompanyStatus_ACTIVE = 0,
  CompanyEvent_CompanyStatus_TEST = 1,
  CompanyEvent_CompanyStatus_DISABLED = 2,
  CompanyEvent_CompanyStatus_TEMPLATE = 3,
  CompanyEvent_CompanyStatus_CompanyEvent_CompanyStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompanyEvent_CompanyStatus_CompanyEvent_CompanyStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompanyEvent_CompanyStatus_IsValid(int value);
constexpr CompanyEvent_CompanyStatus CompanyEvent_CompanyStatus_CompanyStatus_MIN = CompanyEvent_CompanyStatus_ACTIVE;
constexpr CompanyEvent_CompanyStatus CompanyEvent_CompanyStatus_CompanyStatus_MAX = CompanyEvent_CompanyStatus_TEMPLATE;
constexpr int CompanyEvent_CompanyStatus_CompanyStatus_ARRAYSIZE = CompanyEvent_CompanyStatus_CompanyStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompanyEvent_CompanyStatus_descriptor();
template<typename T>
inline const std::string& CompanyEvent_CompanyStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompanyEvent_CompanyStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompanyEvent_CompanyStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompanyEvent_CompanyStatus_descriptor(), enum_t_value);
}
inline bool CompanyEvent_CompanyStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompanyEvent_CompanyStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompanyEvent_CompanyStatus>(
    CompanyEvent_CompanyStatus_descriptor(), name, value);
}
enum CompanyStaffEvent_CompanyStaffStatus : int {
  CompanyStaffEvent_CompanyStaffStatus_ACTIVE = 0,
  CompanyStaffEvent_CompanyStaffStatus_DISABLED = 1,
  CompanyStaffEvent_CompanyStaffStatus_CompanyStaffEvent_CompanyStaffStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CompanyStaffEvent_CompanyStaffStatus_CompanyStaffEvent_CompanyStaffStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CompanyStaffEvent_CompanyStaffStatus_IsValid(int value);
constexpr CompanyStaffEvent_CompanyStaffStatus CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_MIN = CompanyStaffEvent_CompanyStaffStatus_ACTIVE;
constexpr CompanyStaffEvent_CompanyStaffStatus CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_MAX = CompanyStaffEvent_CompanyStaffStatus_DISABLED;
constexpr int CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_ARRAYSIZE = CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompanyStaffEvent_CompanyStaffStatus_descriptor();
template<typename T>
inline const std::string& CompanyStaffEvent_CompanyStaffStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompanyStaffEvent_CompanyStaffStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompanyStaffEvent_CompanyStaffStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompanyStaffEvent_CompanyStaffStatus_descriptor(), enum_t_value);
}
inline bool CompanyStaffEvent_CompanyStaffStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompanyStaffEvent_CompanyStaffStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompanyStaffEvent_CompanyStaffStatus>(
    CompanyStaffEvent_CompanyStaffStatus_descriptor(), name, value);
}
enum MaritalStatus : int {
  MARRIED = 0,
  DIVORCED = 1,
  WIDOWED = 2,
  NEVER_MARRIED = 3,
  SEPARATED = 4,
  MaritalStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MaritalStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MaritalStatus_IsValid(int value);
constexpr MaritalStatus MaritalStatus_MIN = MARRIED;
constexpr MaritalStatus MaritalStatus_MAX = SEPARATED;
constexpr int MaritalStatus_ARRAYSIZE = MaritalStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MaritalStatus_descriptor();
template<typename T>
inline const std::string& MaritalStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MaritalStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MaritalStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MaritalStatus_descriptor(), enum_t_value);
}
inline bool MaritalStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MaritalStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MaritalStatus>(
    MaritalStatus_descriptor(), name, value);
}
// ===================================================================

class CompanyEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Onboarding.CompanyEvent) */ {
 public:
  inline CompanyEvent() : CompanyEvent(nullptr) {}
  virtual ~CompanyEvent();

  CompanyEvent(const CompanyEvent& from);
  CompanyEvent(CompanyEvent&& from) noexcept
    : CompanyEvent() {
    *this = ::std::move(from);
  }

  inline CompanyEvent& operator=(const CompanyEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyEvent& operator=(CompanyEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompanyEvent& default_instance();

  static inline const CompanyEvent* internal_default_instance() {
    return reinterpret_cast<const CompanyEvent*>(
               &_CompanyEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompanyEvent& a, CompanyEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CompanyEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompanyEvent* New() const final {
    return CreateMaybeMessage<CompanyEvent>(nullptr);
  }

  CompanyEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompanyEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompanyEvent& from);
  void MergeFrom(const CompanyEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompanyEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Onboarding.CompanyEvent";
  }
  protected:
  explicit CompanyEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Onboarding_2eproto);
    return ::descriptor_table_Onboarding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CompanyEvent_CompanyStatus CompanyStatus;
  static constexpr CompanyStatus ACTIVE =
    CompanyEvent_CompanyStatus_ACTIVE;
  static constexpr CompanyStatus TEST =
    CompanyEvent_CompanyStatus_TEST;
  static constexpr CompanyStatus DISABLED =
    CompanyEvent_CompanyStatus_DISABLED;
  static constexpr CompanyStatus TEMPLATE =
    CompanyEvent_CompanyStatus_TEMPLATE;
  static inline bool CompanyStatus_IsValid(int value) {
    return CompanyEvent_CompanyStatus_IsValid(value);
  }
  static constexpr CompanyStatus CompanyStatus_MIN =
    CompanyEvent_CompanyStatus_CompanyStatus_MIN;
  static constexpr CompanyStatus CompanyStatus_MAX =
    CompanyEvent_CompanyStatus_CompanyStatus_MAX;
  static constexpr int CompanyStatus_ARRAYSIZE =
    CompanyEvent_CompanyStatus_CompanyStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompanyStatus_descriptor() {
    return CompanyEvent_CompanyStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& CompanyStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompanyStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompanyStatus_Name.");
    return CompanyEvent_CompanyStatus_Name(enum_t_value);
  }
  static inline bool CompanyStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CompanyStatus* value) {
    return CompanyEvent_CompanyStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 5,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kIdFieldNumber = 2,
    kStatusFieldNumber = 6,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 5;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 4;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Workstream.Protocol.Onboarding.CompanyEvent.CompanyStatus status = 6;
  void clear_status();
  ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus status() const;
  void set_status(::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus value);
  private:
  ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus _internal_status() const;
  void _internal_set_status(::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Onboarding.CompanyEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Onboarding_2eproto;
};
// -------------------------------------------------------------------

class EmployeeEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Onboarding.EmployeeEvent) */ {
 public:
  inline EmployeeEvent() : EmployeeEvent(nullptr) {}
  virtual ~EmployeeEvent();

  EmployeeEvent(const EmployeeEvent& from);
  EmployeeEvent(EmployeeEvent&& from) noexcept
    : EmployeeEvent() {
    *this = ::std::move(from);
  }

  inline EmployeeEvent& operator=(const EmployeeEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmployeeEvent& operator=(EmployeeEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmployeeEvent& default_instance();

  static inline const EmployeeEvent* internal_default_instance() {
    return reinterpret_cast<const EmployeeEvent*>(
               &_EmployeeEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EmployeeEvent& a, EmployeeEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EmployeeEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmployeeEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmployeeEvent* New() const final {
    return CreateMaybeMessage<EmployeeEvent>(nullptr);
  }

  EmployeeEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmployeeEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmployeeEvent& from);
  void MergeFrom(const EmployeeEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmployeeEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Onboarding.EmployeeEvent";
  }
  protected:
  explicit EmployeeEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Onboarding_2eproto);
    return ::descriptor_table_Onboarding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kIdFieldNumber = 2,
    kCompanyIdFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 4;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 company_id = 5;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::int64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Onboarding.EmployeeEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 company_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Onboarding_2eproto;
};
// -------------------------------------------------------------------

class CompanyStaffEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Onboarding.CompanyStaffEvent) */ {
 public:
  inline CompanyStaffEvent() : CompanyStaffEvent(nullptr) {}
  virtual ~CompanyStaffEvent();

  CompanyStaffEvent(const CompanyStaffEvent& from);
  CompanyStaffEvent(CompanyStaffEvent&& from) noexcept
    : CompanyStaffEvent() {
    *this = ::std::move(from);
  }

  inline CompanyStaffEvent& operator=(const CompanyStaffEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompanyStaffEvent& operator=(CompanyStaffEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompanyStaffEvent& default_instance();

  static inline const CompanyStaffEvent* internal_default_instance() {
    return reinterpret_cast<const CompanyStaffEvent*>(
               &_CompanyStaffEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CompanyStaffEvent& a, CompanyStaffEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(CompanyStaffEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompanyStaffEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompanyStaffEvent* New() const final {
    return CreateMaybeMessage<CompanyStaffEvent>(nullptr);
  }

  CompanyStaffEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompanyStaffEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompanyStaffEvent& from);
  void MergeFrom(const CompanyStaffEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompanyStaffEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Onboarding.CompanyStaffEvent";
  }
  protected:
  explicit CompanyStaffEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Onboarding_2eproto);
    return ::descriptor_table_Onboarding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef CompanyStaffEvent_CompanyStaffStatus CompanyStaffStatus;
  static constexpr CompanyStaffStatus ACTIVE =
    CompanyStaffEvent_CompanyStaffStatus_ACTIVE;
  static constexpr CompanyStaffStatus DISABLED =
    CompanyStaffEvent_CompanyStaffStatus_DISABLED;
  static inline bool CompanyStaffStatus_IsValid(int value) {
    return CompanyStaffEvent_CompanyStaffStatus_IsValid(value);
  }
  static constexpr CompanyStaffStatus CompanyStaffStatus_MIN =
    CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_MIN;
  static constexpr CompanyStaffStatus CompanyStaffStatus_MAX =
    CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_MAX;
  static constexpr int CompanyStaffStatus_ARRAYSIZE =
    CompanyStaffEvent_CompanyStaffStatus_CompanyStaffStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  CompanyStaffStatus_descriptor() {
    return CompanyStaffEvent_CompanyStaffStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& CompanyStaffStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, CompanyStaffStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function CompanyStaffStatus_Name.");
    return CompanyStaffEvent_CompanyStaffStatus_Name(enum_t_value);
  }
  static inline bool CompanyStaffStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      CompanyStaffStatus* value) {
    return CompanyStaffEvent_CompanyStaffStatus_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kNameFieldNumber = 7,
    kEmailFieldNumber = 8,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kPhoneFieldNumber = 9,
    kIdFieldNumber = 2,
    kCompanyIdFieldNumber = 6,
    kStatusFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string name = 7;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string email = 8;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 4;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .Workstream.Protocol.Common.Phone phone = 9;
  bool has_phone() const;
  private:
  bool _internal_has_phone() const;
  public:
  void clear_phone();
  const ::Workstream::Protocol::Common::Phone& phone() const;
  ::Workstream::Protocol::Common::Phone* release_phone();
  ::Workstream::Protocol::Common::Phone* mutable_phone();
  void set_allocated_phone(::Workstream::Protocol::Common::Phone* phone);
  private:
  const ::Workstream::Protocol::Common::Phone& _internal_phone() const;
  ::Workstream::Protocol::Common::Phone* _internal_mutable_phone();
  public:
  void unsafe_arena_set_allocated_phone(
      ::Workstream::Protocol::Common::Phone* phone);
  ::Workstream::Protocol::Common::Phone* unsafe_arena_release_phone();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 company_id = 6;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::int64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Workstream.Protocol.Onboarding.CompanyStaffEvent.CompanyStaffStatus status = 5;
  void clear_status();
  ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus status() const;
  void set_status(::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus value);
  private:
  ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus _internal_status() const;
  void _internal_set_status(::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus value);
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Onboarding.CompanyStaffEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::Workstream::Protocol::Common::Phone* phone_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 company_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Onboarding_2eproto;
};
// -------------------------------------------------------------------

class EmergencyContact PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Onboarding.EmergencyContact) */ {
 public:
  inline EmergencyContact() : EmergencyContact(nullptr) {}
  virtual ~EmergencyContact();

  EmergencyContact(const EmergencyContact& from);
  EmergencyContact(EmergencyContact&& from) noexcept
    : EmergencyContact() {
    *this = ::std::move(from);
  }

  inline EmergencyContact& operator=(const EmergencyContact& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmergencyContact& operator=(EmergencyContact&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmergencyContact& default_instance();

  static inline const EmergencyContact* internal_default_instance() {
    return reinterpret_cast<const EmergencyContact*>(
               &_EmergencyContact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EmergencyContact& a, EmergencyContact& b) {
    a.Swap(&b);
  }
  inline void Swap(EmergencyContact* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmergencyContact* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmergencyContact* New() const final {
    return CreateMaybeMessage<EmergencyContact>(nullptr);
  }

  EmergencyContact* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmergencyContact>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmergencyContact& from);
  void MergeFrom(const EmergencyContact& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmergencyContact* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Onboarding.EmergencyContact";
  }
  protected:
  explicit EmergencyContact(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Onboarding_2eproto);
    return ::descriptor_table_Onboarding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelationshipFieldNumber = 1,
    kFirstNameFieldNumber = 2,
    kLastNameFieldNumber = 3,
    kHomePhoneFieldNumber = 4,
    kWorkPhoneFieldNumber = 5,
    kEmailFieldNumber = 6,
    kAddressFieldNumber = 7,
  };
  // string relationship = 1;
  void clear_relationship();
  const std::string& relationship() const;
  void set_relationship(const std::string& value);
  void set_relationship(std::string&& value);
  void set_relationship(const char* value);
  void set_relationship(const char* value, size_t size);
  std::string* mutable_relationship();
  std::string* release_relationship();
  void set_allocated_relationship(std::string* relationship);
  private:
  const std::string& _internal_relationship() const;
  void _internal_set_relationship(const std::string& value);
  std::string* _internal_mutable_relationship();
  public:

  // string first_name = 2;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 3;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string home_phone = 4;
  void clear_home_phone();
  const std::string& home_phone() const;
  void set_home_phone(const std::string& value);
  void set_home_phone(std::string&& value);
  void set_home_phone(const char* value);
  void set_home_phone(const char* value, size_t size);
  std::string* mutable_home_phone();
  std::string* release_home_phone();
  void set_allocated_home_phone(std::string* home_phone);
  private:
  const std::string& _internal_home_phone() const;
  void _internal_set_home_phone(const std::string& value);
  std::string* _internal_mutable_home_phone();
  public:

  // string work_phone = 5;
  void clear_work_phone();
  const std::string& work_phone() const;
  void set_work_phone(const std::string& value);
  void set_work_phone(std::string&& value);
  void set_work_phone(const char* value);
  void set_work_phone(const char* value, size_t size);
  std::string* mutable_work_phone();
  std::string* release_work_phone();
  void set_allocated_work_phone(std::string* work_phone);
  private:
  const std::string& _internal_work_phone() const;
  void _internal_set_work_phone(const std::string& value);
  std::string* _internal_mutable_work_phone();
  public:

  // string email = 6;
  void clear_email();
  const std::string& email() const;
  void set_email(const std::string& value);
  void set_email(std::string&& value);
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  std::string* mutable_email();
  std::string* release_email();
  void set_allocated_email(std::string* email);
  private:
  const std::string& _internal_email() const;
  void _internal_set_email(const std::string& value);
  std::string* _internal_mutable_email();
  public:

  // .Workstream.Protocol.Common.Address address = 7;
  bool has_address() const;
  private:
  bool _internal_has_address() const;
  public:
  void clear_address();
  const ::Workstream::Protocol::Common::Address& address() const;
  ::Workstream::Protocol::Common::Address* release_address();
  ::Workstream::Protocol::Common::Address* mutable_address();
  void set_allocated_address(::Workstream::Protocol::Common::Address* address);
  private:
  const ::Workstream::Protocol::Common::Address& _internal_address() const;
  ::Workstream::Protocol::Common::Address* _internal_mutable_address();
  public:
  void unsafe_arena_set_allocated_address(
      ::Workstream::Protocol::Common::Address* address);
  ::Workstream::Protocol::Common::Address* unsafe_arena_release_address();

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Onboarding.EmergencyContact)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr relationship_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr work_phone_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
  ::Workstream::Protocol::Common::Address* address_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Onboarding_2eproto;
};
// -------------------------------------------------------------------

class EmployeeInformationEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Onboarding.EmployeeInformationEvent) */ {
 public:
  inline EmployeeInformationEvent() : EmployeeInformationEvent(nullptr) {}
  virtual ~EmployeeInformationEvent();

  EmployeeInformationEvent(const EmployeeInformationEvent& from);
  EmployeeInformationEvent(EmployeeInformationEvent&& from) noexcept
    : EmployeeInformationEvent() {
    *this = ::std::move(from);
  }

  inline EmployeeInformationEvent& operator=(const EmployeeInformationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmployeeInformationEvent& operator=(EmployeeInformationEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmployeeInformationEvent& default_instance();

  static inline const EmployeeInformationEvent* internal_default_instance() {
    return reinterpret_cast<const EmployeeInformationEvent*>(
               &_EmployeeInformationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EmployeeInformationEvent& a, EmployeeInformationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EmployeeInformationEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmployeeInformationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmployeeInformationEvent* New() const final {
    return CreateMaybeMessage<EmployeeInformationEvent>(nullptr);
  }

  EmployeeInformationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmployeeInformationEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmployeeInformationEvent& from);
  void MergeFrom(const EmployeeInformationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmployeeInformationEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Onboarding.EmployeeInformationEvent";
  }
  protected:
  explicit EmployeeInformationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Onboarding_2eproto);
    return ::descriptor_table_Onboarding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmergencyContactFieldNumber = 51,
    kUuidFieldNumber = 1,
    kFirstNameFieldNumber = 7,
    kMiddleNameFieldNumber = 8,
    kLastNameFieldNumber = 9,
    kPriorLastNameFieldNumber = 10,
    kPreferedNameFieldNumber = 11,
    kSalutationFieldNumber = 12,
    kEthnicityFieldNumber = 13,
    kGenderFieldNumber = 14,
    kSsnFieldNumber = 16,
    kNationalityFieldNumber = 18,
    kDateOfBirthFieldNumber = 19,
    kHomeEmailFieldNumber = 31,
    kWorkLocationNameFieldNumber = 41,
    kWorkEmailFieldNumber = 42,
    kApplyDateFieldNumber = 52,
    kHireDateFieldNumber = 53,
    kStartDateFieldNumber = 54,
    kTerminationDateFieldNumber = 55,
    kJobTitleFieldNumber = 56,
    kDepartmentNameFieldNumber = 57,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kHomePhoneFieldNumber = 32,
    kHomeAddressFieldNumber = 33,
    kWorkPhoneFieldNumber = 43,
    kWorkAddressFieldNumber = 44,
    kIdFieldNumber = 2,
    kCompanyIdFieldNumber = 5,
    kEmployeeIdFieldNumber = 6,
    kMaritalStatusFieldNumber = 15,
    kSmokerFieldNumber = 17,
  };
  // repeated .Workstream.Protocol.Onboarding.EmergencyContact emergency_contact = 51;
  int emergency_contact_size() const;
  private:
  int _internal_emergency_contact_size() const;
  public:
  void clear_emergency_contact();
  ::Workstream::Protocol::Onboarding::EmergencyContact* mutable_emergency_contact(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Workstream::Protocol::Onboarding::EmergencyContact >*
      mutable_emergency_contact();
  private:
  const ::Workstream::Protocol::Onboarding::EmergencyContact& _internal_emergency_contact(int index) const;
  ::Workstream::Protocol::Onboarding::EmergencyContact* _internal_add_emergency_contact();
  public:
  const ::Workstream::Protocol::Onboarding::EmergencyContact& emergency_contact(int index) const;
  ::Workstream::Protocol::Onboarding::EmergencyContact* add_emergency_contact();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Workstream::Protocol::Onboarding::EmergencyContact >&
      emergency_contact() const;

  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string first_name = 7;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string middle_name = 8;
  void clear_middle_name();
  const std::string& middle_name() const;
  void set_middle_name(const std::string& value);
  void set_middle_name(std::string&& value);
  void set_middle_name(const char* value);
  void set_middle_name(const char* value, size_t size);
  std::string* mutable_middle_name();
  std::string* release_middle_name();
  void set_allocated_middle_name(std::string* middle_name);
  private:
  const std::string& _internal_middle_name() const;
  void _internal_set_middle_name(const std::string& value);
  std::string* _internal_mutable_middle_name();
  public:

  // string last_name = 9;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // string prior_last_name = 10;
  void clear_prior_last_name();
  const std::string& prior_last_name() const;
  void set_prior_last_name(const std::string& value);
  void set_prior_last_name(std::string&& value);
  void set_prior_last_name(const char* value);
  void set_prior_last_name(const char* value, size_t size);
  std::string* mutable_prior_last_name();
  std::string* release_prior_last_name();
  void set_allocated_prior_last_name(std::string* prior_last_name);
  private:
  const std::string& _internal_prior_last_name() const;
  void _internal_set_prior_last_name(const std::string& value);
  std::string* _internal_mutable_prior_last_name();
  public:

  // string prefered_name = 11;
  void clear_prefered_name();
  const std::string& prefered_name() const;
  void set_prefered_name(const std::string& value);
  void set_prefered_name(std::string&& value);
  void set_prefered_name(const char* value);
  void set_prefered_name(const char* value, size_t size);
  std::string* mutable_prefered_name();
  std::string* release_prefered_name();
  void set_allocated_prefered_name(std::string* prefered_name);
  private:
  const std::string& _internal_prefered_name() const;
  void _internal_set_prefered_name(const std::string& value);
  std::string* _internal_mutable_prefered_name();
  public:

  // string salutation = 12;
  void clear_salutation();
  const std::string& salutation() const;
  void set_salutation(const std::string& value);
  void set_salutation(std::string&& value);
  void set_salutation(const char* value);
  void set_salutation(const char* value, size_t size);
  std::string* mutable_salutation();
  std::string* release_salutation();
  void set_allocated_salutation(std::string* salutation);
  private:
  const std::string& _internal_salutation() const;
  void _internal_set_salutation(const std::string& value);
  std::string* _internal_mutable_salutation();
  public:

  // string ethnicity = 13;
  void clear_ethnicity();
  const std::string& ethnicity() const;
  void set_ethnicity(const std::string& value);
  void set_ethnicity(std::string&& value);
  void set_ethnicity(const char* value);
  void set_ethnicity(const char* value, size_t size);
  std::string* mutable_ethnicity();
  std::string* release_ethnicity();
  void set_allocated_ethnicity(std::string* ethnicity);
  private:
  const std::string& _internal_ethnicity() const;
  void _internal_set_ethnicity(const std::string& value);
  std::string* _internal_mutable_ethnicity();
  public:

  // string gender = 14;
  void clear_gender();
  const std::string& gender() const;
  void set_gender(const std::string& value);
  void set_gender(std::string&& value);
  void set_gender(const char* value);
  void set_gender(const char* value, size_t size);
  std::string* mutable_gender();
  std::string* release_gender();
  void set_allocated_gender(std::string* gender);
  private:
  const std::string& _internal_gender() const;
  void _internal_set_gender(const std::string& value);
  std::string* _internal_mutable_gender();
  public:

  // string ssn = 16;
  void clear_ssn();
  const std::string& ssn() const;
  void set_ssn(const std::string& value);
  void set_ssn(std::string&& value);
  void set_ssn(const char* value);
  void set_ssn(const char* value, size_t size);
  std::string* mutable_ssn();
  std::string* release_ssn();
  void set_allocated_ssn(std::string* ssn);
  private:
  const std::string& _internal_ssn() const;
  void _internal_set_ssn(const std::string& value);
  std::string* _internal_mutable_ssn();
  public:

  // string nationality = 18;
  void clear_nationality();
  const std::string& nationality() const;
  void set_nationality(const std::string& value);
  void set_nationality(std::string&& value);
  void set_nationality(const char* value);
  void set_nationality(const char* value, size_t size);
  std::string* mutable_nationality();
  std::string* release_nationality();
  void set_allocated_nationality(std::string* nationality);
  private:
  const std::string& _internal_nationality() const;
  void _internal_set_nationality(const std::string& value);
  std::string* _internal_mutable_nationality();
  public:

  // string date_of_birth = 19;
  void clear_date_of_birth();
  const std::string& date_of_birth() const;
  void set_date_of_birth(const std::string& value);
  void set_date_of_birth(std::string&& value);
  void set_date_of_birth(const char* value);
  void set_date_of_birth(const char* value, size_t size);
  std::string* mutable_date_of_birth();
  std::string* release_date_of_birth();
  void set_allocated_date_of_birth(std::string* date_of_birth);
  private:
  const std::string& _internal_date_of_birth() const;
  void _internal_set_date_of_birth(const std::string& value);
  std::string* _internal_mutable_date_of_birth();
  public:

  // string home_email = 31;
  void clear_home_email();
  const std::string& home_email() const;
  void set_home_email(const std::string& value);
  void set_home_email(std::string&& value);
  void set_home_email(const char* value);
  void set_home_email(const char* value, size_t size);
  std::string* mutable_home_email();
  std::string* release_home_email();
  void set_allocated_home_email(std::string* home_email);
  private:
  const std::string& _internal_home_email() const;
  void _internal_set_home_email(const std::string& value);
  std::string* _internal_mutable_home_email();
  public:

  // string work_location_name = 41;
  void clear_work_location_name();
  const std::string& work_location_name() const;
  void set_work_location_name(const std::string& value);
  void set_work_location_name(std::string&& value);
  void set_work_location_name(const char* value);
  void set_work_location_name(const char* value, size_t size);
  std::string* mutable_work_location_name();
  std::string* release_work_location_name();
  void set_allocated_work_location_name(std::string* work_location_name);
  private:
  const std::string& _internal_work_location_name() const;
  void _internal_set_work_location_name(const std::string& value);
  std::string* _internal_mutable_work_location_name();
  public:

  // string work_email = 42;
  void clear_work_email();
  const std::string& work_email() const;
  void set_work_email(const std::string& value);
  void set_work_email(std::string&& value);
  void set_work_email(const char* value);
  void set_work_email(const char* value, size_t size);
  std::string* mutable_work_email();
  std::string* release_work_email();
  void set_allocated_work_email(std::string* work_email);
  private:
  const std::string& _internal_work_email() const;
  void _internal_set_work_email(const std::string& value);
  std::string* _internal_mutable_work_email();
  public:

  // string apply_date = 52;
  void clear_apply_date();
  const std::string& apply_date() const;
  void set_apply_date(const std::string& value);
  void set_apply_date(std::string&& value);
  void set_apply_date(const char* value);
  void set_apply_date(const char* value, size_t size);
  std::string* mutable_apply_date();
  std::string* release_apply_date();
  void set_allocated_apply_date(std::string* apply_date);
  private:
  const std::string& _internal_apply_date() const;
  void _internal_set_apply_date(const std::string& value);
  std::string* _internal_mutable_apply_date();
  public:

  // string hire_date = 53;
  void clear_hire_date();
  const std::string& hire_date() const;
  void set_hire_date(const std::string& value);
  void set_hire_date(std::string&& value);
  void set_hire_date(const char* value);
  void set_hire_date(const char* value, size_t size);
  std::string* mutable_hire_date();
  std::string* release_hire_date();
  void set_allocated_hire_date(std::string* hire_date);
  private:
  const std::string& _internal_hire_date() const;
  void _internal_set_hire_date(const std::string& value);
  std::string* _internal_mutable_hire_date();
  public:

  // string start_date = 54;
  void clear_start_date();
  const std::string& start_date() const;
  void set_start_date(const std::string& value);
  void set_start_date(std::string&& value);
  void set_start_date(const char* value);
  void set_start_date(const char* value, size_t size);
  std::string* mutable_start_date();
  std::string* release_start_date();
  void set_allocated_start_date(std::string* start_date);
  private:
  const std::string& _internal_start_date() const;
  void _internal_set_start_date(const std::string& value);
  std::string* _internal_mutable_start_date();
  public:

  // string termination_date = 55;
  void clear_termination_date();
  const std::string& termination_date() const;
  void set_termination_date(const std::string& value);
  void set_termination_date(std::string&& value);
  void set_termination_date(const char* value);
  void set_termination_date(const char* value, size_t size);
  std::string* mutable_termination_date();
  std::string* release_termination_date();
  void set_allocated_termination_date(std::string* termination_date);
  private:
  const std::string& _internal_termination_date() const;
  void _internal_set_termination_date(const std::string& value);
  std::string* _internal_mutable_termination_date();
  public:

  // string job_title = 56;
  void clear_job_title();
  const std::string& job_title() const;
  void set_job_title(const std::string& value);
  void set_job_title(std::string&& value);
  void set_job_title(const char* value);
  void set_job_title(const char* value, size_t size);
  std::string* mutable_job_title();
  std::string* release_job_title();
  void set_allocated_job_title(std::string* job_title);
  private:
  const std::string& _internal_job_title() const;
  void _internal_set_job_title(const std::string& value);
  std::string* _internal_mutable_job_title();
  public:

  // string department_name = 57;
  void clear_department_name();
  const std::string& department_name() const;
  void set_department_name(const std::string& value);
  void set_department_name(std::string&& value);
  void set_department_name(const char* value);
  void set_department_name(const char* value, size_t size);
  std::string* mutable_department_name();
  std::string* release_department_name();
  void set_allocated_department_name(std::string* department_name);
  private:
  const std::string& _internal_department_name() const;
  void _internal_set_department_name(const std::string& value);
  std::string* _internal_mutable_department_name();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 4;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .Workstream.Protocol.Common.Phone home_phone = 32;
  bool has_home_phone() const;
  private:
  bool _internal_has_home_phone() const;
  public:
  void clear_home_phone();
  const ::Workstream::Protocol::Common::Phone& home_phone() const;
  ::Workstream::Protocol::Common::Phone* release_home_phone();
  ::Workstream::Protocol::Common::Phone* mutable_home_phone();
  void set_allocated_home_phone(::Workstream::Protocol::Common::Phone* home_phone);
  private:
  const ::Workstream::Protocol::Common::Phone& _internal_home_phone() const;
  ::Workstream::Protocol::Common::Phone* _internal_mutable_home_phone();
  public:
  void unsafe_arena_set_allocated_home_phone(
      ::Workstream::Protocol::Common::Phone* home_phone);
  ::Workstream::Protocol::Common::Phone* unsafe_arena_release_home_phone();

  // .Workstream.Protocol.Common.Address home_address = 33;
  bool has_home_address() const;
  private:
  bool _internal_has_home_address() const;
  public:
  void clear_home_address();
  const ::Workstream::Protocol::Common::Address& home_address() const;
  ::Workstream::Protocol::Common::Address* release_home_address();
  ::Workstream::Protocol::Common::Address* mutable_home_address();
  void set_allocated_home_address(::Workstream::Protocol::Common::Address* home_address);
  private:
  const ::Workstream::Protocol::Common::Address& _internal_home_address() const;
  ::Workstream::Protocol::Common::Address* _internal_mutable_home_address();
  public:
  void unsafe_arena_set_allocated_home_address(
      ::Workstream::Protocol::Common::Address* home_address);
  ::Workstream::Protocol::Common::Address* unsafe_arena_release_home_address();

  // .Workstream.Protocol.Common.Phone work_phone = 43;
  bool has_work_phone() const;
  private:
  bool _internal_has_work_phone() const;
  public:
  void clear_work_phone();
  const ::Workstream::Protocol::Common::Phone& work_phone() const;
  ::Workstream::Protocol::Common::Phone* release_work_phone();
  ::Workstream::Protocol::Common::Phone* mutable_work_phone();
  void set_allocated_work_phone(::Workstream::Protocol::Common::Phone* work_phone);
  private:
  const ::Workstream::Protocol::Common::Phone& _internal_work_phone() const;
  ::Workstream::Protocol::Common::Phone* _internal_mutable_work_phone();
  public:
  void unsafe_arena_set_allocated_work_phone(
      ::Workstream::Protocol::Common::Phone* work_phone);
  ::Workstream::Protocol::Common::Phone* unsafe_arena_release_work_phone();

  // .Workstream.Protocol.Common.Address work_address = 44;
  bool has_work_address() const;
  private:
  bool _internal_has_work_address() const;
  public:
  void clear_work_address();
  const ::Workstream::Protocol::Common::Address& work_address() const;
  ::Workstream::Protocol::Common::Address* release_work_address();
  ::Workstream::Protocol::Common::Address* mutable_work_address();
  void set_allocated_work_address(::Workstream::Protocol::Common::Address* work_address);
  private:
  const ::Workstream::Protocol::Common::Address& _internal_work_address() const;
  ::Workstream::Protocol::Common::Address* _internal_mutable_work_address();
  public:
  void unsafe_arena_set_allocated_work_address(
      ::Workstream::Protocol::Common::Address* work_address);
  ::Workstream::Protocol::Common::Address* unsafe_arena_release_work_address();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 company_id = 5;
  void clear_company_id();
  ::PROTOBUF_NAMESPACE_ID::int64 company_id() const;
  void set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_company_id() const;
  void _internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 employee_id = 6;
  void clear_employee_id();
  ::PROTOBUF_NAMESPACE_ID::int64 employee_id() const;
  void set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_employee_id() const;
  void _internal_set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .Workstream.Protocol.Onboarding.MaritalStatus marital_status = 15;
  void clear_marital_status();
  ::Workstream::Protocol::Onboarding::MaritalStatus marital_status() const;
  void set_marital_status(::Workstream::Protocol::Onboarding::MaritalStatus value);
  private:
  ::Workstream::Protocol::Onboarding::MaritalStatus _internal_marital_status() const;
  void _internal_set_marital_status(::Workstream::Protocol::Onboarding::MaritalStatus value);
  public:

  // bool smoker = 17;
  void clear_smoker();
  bool smoker() const;
  void set_smoker(bool value);
  private:
  bool _internal_smoker() const;
  void _internal_set_smoker(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Onboarding.EmployeeInformationEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Workstream::Protocol::Onboarding::EmergencyContact > emergency_contact_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr middle_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prior_last_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prefered_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr salutation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ethnicity_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ssn_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nationality_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr date_of_birth_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr home_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr work_location_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr work_email_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apply_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hire_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr start_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr termination_date_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr job_title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr department_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::Workstream::Protocol::Common::Phone* home_phone_;
  ::Workstream::Protocol::Common::Address* home_address_;
  ::Workstream::Protocol::Common::Phone* work_phone_;
  ::Workstream::Protocol::Common::Address* work_address_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 company_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 employee_id_;
  int marital_status_;
  bool smoker_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Onboarding_2eproto;
};
// -------------------------------------------------------------------

class EmployeeInitialStateEvent PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent) */ {
 public:
  inline EmployeeInitialStateEvent() : EmployeeInitialStateEvent(nullptr) {}
  virtual ~EmployeeInitialStateEvent();

  EmployeeInitialStateEvent(const EmployeeInitialStateEvent& from);
  EmployeeInitialStateEvent(EmployeeInitialStateEvent&& from) noexcept
    : EmployeeInitialStateEvent() {
    *this = ::std::move(from);
  }

  inline EmployeeInitialStateEvent& operator=(const EmployeeInitialStateEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline EmployeeInitialStateEvent& operator=(EmployeeInitialStateEvent&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EmployeeInitialStateEvent& default_instance();

  static inline const EmployeeInitialStateEvent* internal_default_instance() {
    return reinterpret_cast<const EmployeeInitialStateEvent*>(
               &_EmployeeInitialStateEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(EmployeeInitialStateEvent& a, EmployeeInitialStateEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(EmployeeInitialStateEvent* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EmployeeInitialStateEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EmployeeInitialStateEvent* New() const final {
    return CreateMaybeMessage<EmployeeInitialStateEvent>(nullptr);
  }

  EmployeeInitialStateEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EmployeeInitialStateEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EmployeeInitialStateEvent& from);
  void MergeFrom(const EmployeeInitialStateEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EmployeeInitialStateEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Workstream.Protocol.Onboarding.EmployeeInitialStateEvent";
  }
  protected:
  explicit EmployeeInitialStateEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Onboarding_2eproto);
    return ::descriptor_table_Onboarding_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kFirstNameFieldNumber = 6,
    kLastNameFieldNumber = 7,
    kCreatedAtFieldNumber = 3,
    kUpdatedAtFieldNumber = 4,
    kIdFieldNumber = 2,
    kEmployeeIdFieldNumber = 5,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // string first_name = 6;
  void clear_first_name();
  const std::string& first_name() const;
  void set_first_name(const std::string& value);
  void set_first_name(std::string&& value);
  void set_first_name(const char* value);
  void set_first_name(const char* value, size_t size);
  std::string* mutable_first_name();
  std::string* release_first_name();
  void set_allocated_first_name(std::string* first_name);
  private:
  const std::string& _internal_first_name() const;
  void _internal_set_first_name(const std::string& value);
  std::string* _internal_mutable_first_name();
  public:

  // string last_name = 7;
  void clear_last_name();
  const std::string& last_name() const;
  void set_last_name(const std::string& value);
  void set_last_name(std::string&& value);
  void set_last_name(const char* value);
  void set_last_name(const char* value, size_t size);
  std::string* mutable_last_name();
  std::string* release_last_name();
  void set_allocated_last_name(std::string* last_name);
  private:
  const std::string& _internal_last_name() const;
  void _internal_set_last_name(const std::string& value);
  std::string* _internal_mutable_last_name();
  public:

  // .google.protobuf.Timestamp created_at = 3;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.Timestamp updated_at = 4;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // int64 id = 2;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 employee_id = 5;
  void clear_employee_id();
  ::PROTOBUF_NAMESPACE_ID::int64 employee_id() const;
  void set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_employee_id() const;
  void _internal_set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr first_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_name_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::PROTOBUF_NAMESPACE_ID::int64 id_;
  ::PROTOBUF_NAMESPACE_ID::int64 employee_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Onboarding_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompanyEvent

// string uuid = 1;
inline void CompanyEvent::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& CompanyEvent::uuid() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
  return _internal_uuid();
}
inline void CompanyEvent::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
}
inline std::string* CompanyEvent::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& CompanyEvent::_internal_uuid() const {
  return uuid_.Get();
}
inline void CompanyEvent::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompanyEvent::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
}
inline void CompanyEvent::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
}
inline void CompanyEvent::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
}
inline std::string* CompanyEvent::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompanyEvent::release_uuid() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompanyEvent::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyEvent.uuid)
}

// int64 id = 2;
inline void CompanyEvent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompanyEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompanyEvent::id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyEvent.id)
  return _internal_id();
}
inline void CompanyEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void CompanyEvent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyEvent.id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool CompanyEvent::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool CompanyEvent::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyEvent::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyEvent::created_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyEvent.created_at)
  return _internal_created_at();
}
inline void CompanyEvent::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.CompanyEvent.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyEvent.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyEvent.created_at)
  return _internal_mutable_created_at();
}
inline void CompanyEvent::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyEvent.created_at)
}

// .google.protobuf.Timestamp updated_at = 4;
inline bool CompanyEvent::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool CompanyEvent::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyEvent::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyEvent::updated_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyEvent.updated_at)
  return _internal_updated_at();
}
inline void CompanyEvent::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.CompanyEvent.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyEvent.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyEvent::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyEvent.updated_at)
  return _internal_mutable_updated_at();
}
inline void CompanyEvent::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyEvent.updated_at)
}

// string name = 5;
inline void CompanyEvent::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CompanyEvent::name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyEvent.name)
  return _internal_name();
}
inline void CompanyEvent::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyEvent.name)
}
inline std::string* CompanyEvent::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyEvent.name)
  return _internal_mutable_name();
}
inline const std::string& CompanyEvent::_internal_name() const {
  return name_.Get();
}
inline void CompanyEvent::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompanyEvent::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.CompanyEvent.name)
}
inline void CompanyEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.CompanyEvent.name)
}
inline void CompanyEvent::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.CompanyEvent.name)
}
inline std::string* CompanyEvent::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompanyEvent::release_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyEvent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompanyEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyEvent.name)
}

// .Workstream.Protocol.Onboarding.CompanyEvent.CompanyStatus status = 6;
inline void CompanyEvent::clear_status() {
  status_ = 0;
}
inline ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus CompanyEvent::_internal_status() const {
  return static_cast< ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus >(status_);
}
inline ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus CompanyEvent::status() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyEvent.status)
  return _internal_status();
}
inline void CompanyEvent::_internal_set_status(::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus value) {
  
  status_ = value;
}
inline void CompanyEvent::set_status(::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyEvent.status)
}

// -------------------------------------------------------------------

// EmployeeEvent

// string uuid = 1;
inline void EmployeeEvent::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& EmployeeEvent::uuid() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
  return _internal_uuid();
}
inline void EmployeeEvent::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
}
inline std::string* EmployeeEvent::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& EmployeeEvent::_internal_uuid() const {
  return uuid_.Get();
}
inline void EmployeeEvent::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeEvent::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
}
inline void EmployeeEvent::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
}
inline void EmployeeEvent::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
}
inline std::string* EmployeeEvent::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeEvent::release_uuid() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeEvent::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeEvent.uuid)
}

// int64 id = 2;
inline void EmployeeEvent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeEvent::id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeEvent.id)
  return _internal_id();
}
inline void EmployeeEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void EmployeeEvent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeEvent.id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool EmployeeEvent::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool EmployeeEvent::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeEvent::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeEvent::created_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeEvent.created_at)
  return _internal_created_at();
}
inline void EmployeeEvent::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeEvent.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeEvent.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeEvent.created_at)
  return _internal_mutable_created_at();
}
inline void EmployeeEvent::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeEvent.created_at)
}

// .google.protobuf.Timestamp updated_at = 4;
inline bool EmployeeEvent::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool EmployeeEvent::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeEvent::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeEvent::updated_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeEvent.updated_at)
  return _internal_updated_at();
}
inline void EmployeeEvent::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeEvent.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeEvent.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeEvent::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeEvent.updated_at)
  return _internal_mutable_updated_at();
}
inline void EmployeeEvent::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeEvent.updated_at)
}

// int64 company_id = 5;
inline void EmployeeEvent::clear_company_id() {
  company_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeEvent::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeEvent::company_id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeEvent.company_id)
  return _internal_company_id();
}
inline void EmployeeEvent::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  company_id_ = value;
}
inline void EmployeeEvent::set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeEvent.company_id)
}

// -------------------------------------------------------------------

// CompanyStaffEvent

// string uuid = 1;
inline void CompanyStaffEvent::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& CompanyStaffEvent::uuid() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
  return _internal_uuid();
}
inline void CompanyStaffEvent::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
}
inline std::string* CompanyStaffEvent::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& CompanyStaffEvent::_internal_uuid() const {
  return uuid_.Get();
}
inline void CompanyStaffEvent::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompanyStaffEvent::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
}
inline void CompanyStaffEvent::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
}
inline void CompanyStaffEvent::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
}
inline std::string* CompanyStaffEvent::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompanyStaffEvent::release_uuid() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompanyStaffEvent::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.uuid)
}

// int64 id = 2;
inline void CompanyStaffEvent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompanyStaffEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompanyStaffEvent::id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.id)
  return _internal_id();
}
inline void CompanyStaffEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void CompanyStaffEvent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyStaffEvent.id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool CompanyStaffEvent::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool CompanyStaffEvent::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyStaffEvent::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyStaffEvent::created_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.created_at)
  return _internal_created_at();
}
inline void CompanyStaffEvent::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyStaffEvent.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyStaffEvent.created_at)
  return _internal_mutable_created_at();
}
inline void CompanyStaffEvent::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.created_at)
}

// .google.protobuf.Timestamp updated_at = 4;
inline bool CompanyStaffEvent::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool CompanyStaffEvent::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyStaffEvent::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompanyStaffEvent::updated_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.updated_at)
  return _internal_updated_at();
}
inline void CompanyStaffEvent::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyStaffEvent.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompanyStaffEvent::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyStaffEvent.updated_at)
  return _internal_mutable_updated_at();
}
inline void CompanyStaffEvent::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.updated_at)
}

// .Workstream.Protocol.Onboarding.CompanyStaffEvent.CompanyStaffStatus status = 5;
inline void CompanyStaffEvent::clear_status() {
  status_ = 0;
}
inline ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus CompanyStaffEvent::_internal_status() const {
  return static_cast< ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus >(status_);
}
inline ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus CompanyStaffEvent::status() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.status)
  return _internal_status();
}
inline void CompanyStaffEvent::_internal_set_status(::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus value) {
  
  status_ = value;
}
inline void CompanyStaffEvent::set_status(::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyStaffEvent.status)
}

// int64 company_id = 6;
inline void CompanyStaffEvent::clear_company_id() {
  company_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompanyStaffEvent::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CompanyStaffEvent::company_id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.company_id)
  return _internal_company_id();
}
inline void CompanyStaffEvent::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  company_id_ = value;
}
inline void CompanyStaffEvent::set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyStaffEvent.company_id)
}

// string name = 7;
inline void CompanyStaffEvent::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CompanyStaffEvent::name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
  return _internal_name();
}
inline void CompanyStaffEvent::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
}
inline std::string* CompanyStaffEvent::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
  return _internal_mutable_name();
}
inline const std::string& CompanyStaffEvent::_internal_name() const {
  return name_.Get();
}
inline void CompanyStaffEvent::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompanyStaffEvent::set_name(std::string&& value) {
  
  name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
}
inline void CompanyStaffEvent::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
}
inline void CompanyStaffEvent::set_name(const char* value,
    size_t size) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
}
inline std::string* CompanyStaffEvent::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompanyStaffEvent::release_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompanyStaffEvent::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.name)
}

// string email = 8;
inline void CompanyStaffEvent::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& CompanyStaffEvent::email() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
  return _internal_email();
}
inline void CompanyStaffEvent::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
}
inline std::string* CompanyStaffEvent::mutable_email() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
  return _internal_mutable_email();
}
inline const std::string& CompanyStaffEvent::_internal_email() const {
  return email_.Get();
}
inline void CompanyStaffEvent::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompanyStaffEvent::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
}
inline void CompanyStaffEvent::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
}
inline void CompanyStaffEvent::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
}
inline std::string* CompanyStaffEvent::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompanyStaffEvent::release_email() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompanyStaffEvent::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.email)
}

// .Workstream.Protocol.Common.Phone phone = 9;
inline bool CompanyStaffEvent::_internal_has_phone() const {
  return this != internal_default_instance() && phone_ != nullptr;
}
inline bool CompanyStaffEvent::has_phone() const {
  return _internal_has_phone();
}
inline const ::Workstream::Protocol::Common::Phone& CompanyStaffEvent::_internal_phone() const {
  const ::Workstream::Protocol::Common::Phone* p = phone_;
  return p != nullptr ? *p : reinterpret_cast<const ::Workstream::Protocol::Common::Phone&>(
      ::Workstream::Protocol::Common::_Phone_default_instance_);
}
inline const ::Workstream::Protocol::Common::Phone& CompanyStaffEvent::phone() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.CompanyStaffEvent.phone)
  return _internal_phone();
}
inline void CompanyStaffEvent::unsafe_arena_set_allocated_phone(
    ::Workstream::Protocol::Common::Phone* phone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone_);
  }
  phone_ = phone;
  if (phone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.phone)
}
inline ::Workstream::Protocol::Common::Phone* CompanyStaffEvent::release_phone() {
  
  ::Workstream::Protocol::Common::Phone* temp = phone_;
  phone_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Workstream::Protocol::Common::Phone* CompanyStaffEvent::unsafe_arena_release_phone() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.CompanyStaffEvent.phone)
  
  ::Workstream::Protocol::Common::Phone* temp = phone_;
  phone_ = nullptr;
  return temp;
}
inline ::Workstream::Protocol::Common::Phone* CompanyStaffEvent::_internal_mutable_phone() {
  
  if (phone_ == nullptr) {
    auto* p = CreateMaybeMessage<::Workstream::Protocol::Common::Phone>(GetArena());
    phone_ = p;
  }
  return phone_;
}
inline ::Workstream::Protocol::Common::Phone* CompanyStaffEvent::mutable_phone() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.CompanyStaffEvent.phone)
  return _internal_mutable_phone();
}
inline void CompanyStaffEvent::set_allocated_phone(::Workstream::Protocol::Common::Phone* phone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone_);
  }
  if (phone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phone)->GetArena();
    if (message_arena != submessage_arena) {
      phone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phone, submessage_arena);
    }
    
  } else {
    
  }
  phone_ = phone;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.CompanyStaffEvent.phone)
}

// -------------------------------------------------------------------

// EmergencyContact

// string relationship = 1;
inline void EmergencyContact::clear_relationship() {
  relationship_.ClearToEmpty();
}
inline const std::string& EmergencyContact::relationship() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
  return _internal_relationship();
}
inline void EmergencyContact::set_relationship(const std::string& value) {
  _internal_set_relationship(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
}
inline std::string* EmergencyContact::mutable_relationship() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
  return _internal_mutable_relationship();
}
inline const std::string& EmergencyContact::_internal_relationship() const {
  return relationship_.Get();
}
inline void EmergencyContact::_internal_set_relationship(const std::string& value) {
  
  relationship_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmergencyContact::set_relationship(std::string&& value) {
  
  relationship_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
}
inline void EmergencyContact::set_relationship(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  relationship_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
}
inline void EmergencyContact::set_relationship(const char* value,
    size_t size) {
  
  relationship_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
}
inline std::string* EmergencyContact::_internal_mutable_relationship() {
  
  return relationship_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmergencyContact::release_relationship() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
  return relationship_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmergencyContact::set_allocated_relationship(std::string* relationship) {
  if (relationship != nullptr) {
    
  } else {
    
  }
  relationship_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), relationship,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.relationship)
}

// string first_name = 2;
inline void EmergencyContact::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& EmergencyContact::first_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
  return _internal_first_name();
}
inline void EmergencyContact::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
}
inline std::string* EmergencyContact::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& EmergencyContact::_internal_first_name() const {
  return first_name_.Get();
}
inline void EmergencyContact::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmergencyContact::set_first_name(std::string&& value) {
  
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
}
inline void EmergencyContact::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
}
inline void EmergencyContact::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
}
inline std::string* EmergencyContact::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmergencyContact::release_first_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmergencyContact::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.first_name)
}

// string last_name = 3;
inline void EmergencyContact::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& EmergencyContact::last_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
  return _internal_last_name();
}
inline void EmergencyContact::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
}
inline std::string* EmergencyContact::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& EmergencyContact::_internal_last_name() const {
  return last_name_.Get();
}
inline void EmergencyContact::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmergencyContact::set_last_name(std::string&& value) {
  
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
}
inline void EmergencyContact::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
}
inline void EmergencyContact::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
}
inline std::string* EmergencyContact::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmergencyContact::release_last_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmergencyContact::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.last_name)
}

// string home_phone = 4;
inline void EmergencyContact::clear_home_phone() {
  home_phone_.ClearToEmpty();
}
inline const std::string& EmergencyContact::home_phone() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
  return _internal_home_phone();
}
inline void EmergencyContact::set_home_phone(const std::string& value) {
  _internal_set_home_phone(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
}
inline std::string* EmergencyContact::mutable_home_phone() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
  return _internal_mutable_home_phone();
}
inline const std::string& EmergencyContact::_internal_home_phone() const {
  return home_phone_.Get();
}
inline void EmergencyContact::_internal_set_home_phone(const std::string& value) {
  
  home_phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmergencyContact::set_home_phone(std::string&& value) {
  
  home_phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
}
inline void EmergencyContact::set_home_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  home_phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
}
inline void EmergencyContact::set_home_phone(const char* value,
    size_t size) {
  
  home_phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
}
inline std::string* EmergencyContact::_internal_mutable_home_phone() {
  
  return home_phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmergencyContact::release_home_phone() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
  return home_phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmergencyContact::set_allocated_home_phone(std::string* home_phone) {
  if (home_phone != nullptr) {
    
  } else {
    
  }
  home_phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home_phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.home_phone)
}

// string work_phone = 5;
inline void EmergencyContact::clear_work_phone() {
  work_phone_.ClearToEmpty();
}
inline const std::string& EmergencyContact::work_phone() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
  return _internal_work_phone();
}
inline void EmergencyContact::set_work_phone(const std::string& value) {
  _internal_set_work_phone(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
}
inline std::string* EmergencyContact::mutable_work_phone() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
  return _internal_mutable_work_phone();
}
inline const std::string& EmergencyContact::_internal_work_phone() const {
  return work_phone_.Get();
}
inline void EmergencyContact::_internal_set_work_phone(const std::string& value) {
  
  work_phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmergencyContact::set_work_phone(std::string&& value) {
  
  work_phone_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
}
inline void EmergencyContact::set_work_phone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  work_phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
}
inline void EmergencyContact::set_work_phone(const char* value,
    size_t size) {
  
  work_phone_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
}
inline std::string* EmergencyContact::_internal_mutable_work_phone() {
  
  return work_phone_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmergencyContact::release_work_phone() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
  return work_phone_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmergencyContact::set_allocated_work_phone(std::string* work_phone) {
  if (work_phone != nullptr) {
    
  } else {
    
  }
  work_phone_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), work_phone,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.work_phone)
}

// string email = 6;
inline void EmergencyContact::clear_email() {
  email_.ClearToEmpty();
}
inline const std::string& EmergencyContact::email() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.email)
  return _internal_email();
}
inline void EmergencyContact::set_email(const std::string& value) {
  _internal_set_email(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmergencyContact.email)
}
inline std::string* EmergencyContact::mutable_email() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.email)
  return _internal_mutable_email();
}
inline const std::string& EmergencyContact::_internal_email() const {
  return email_.Get();
}
inline void EmergencyContact::_internal_set_email(const std::string& value) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmergencyContact::set_email(std::string&& value) {
  
  email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmergencyContact.email)
}
inline void EmergencyContact::set_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmergencyContact.email)
}
inline void EmergencyContact::set_email(const char* value,
    size_t size) {
  
  email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmergencyContact.email)
}
inline std::string* EmergencyContact::_internal_mutable_email() {
  
  return email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmergencyContact::release_email() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.email)
  return email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmergencyContact::set_allocated_email(std::string* email) {
  if (email != nullptr) {
    
  } else {
    
  }
  email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.email)
}

// .Workstream.Protocol.Common.Address address = 7;
inline bool EmergencyContact::_internal_has_address() const {
  return this != internal_default_instance() && address_ != nullptr;
}
inline bool EmergencyContact::has_address() const {
  return _internal_has_address();
}
inline const ::Workstream::Protocol::Common::Address& EmergencyContact::_internal_address() const {
  const ::Workstream::Protocol::Common::Address* p = address_;
  return p != nullptr ? *p : reinterpret_cast<const ::Workstream::Protocol::Common::Address&>(
      ::Workstream::Protocol::Common::_Address_default_instance_);
}
inline const ::Workstream::Protocol::Common::Address& EmergencyContact::address() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmergencyContact.address)
  return _internal_address();
}
inline void EmergencyContact::unsafe_arena_set_allocated_address(
    ::Workstream::Protocol::Common::Address* address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  address_ = address;
  if (address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.address)
}
inline ::Workstream::Protocol::Common::Address* EmergencyContact::release_address() {
  
  ::Workstream::Protocol::Common::Address* temp = address_;
  address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Workstream::Protocol::Common::Address* EmergencyContact::unsafe_arena_release_address() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmergencyContact.address)
  
  ::Workstream::Protocol::Common::Address* temp = address_;
  address_ = nullptr;
  return temp;
}
inline ::Workstream::Protocol::Common::Address* EmergencyContact::_internal_mutable_address() {
  
  if (address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Workstream::Protocol::Common::Address>(GetArena());
    address_ = p;
  }
  return address_;
}
inline ::Workstream::Protocol::Common::Address* EmergencyContact::mutable_address() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmergencyContact.address)
  return _internal_mutable_address();
}
inline void EmergencyContact::set_allocated_address(::Workstream::Protocol::Common::Address* address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(address_);
  }
  if (address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(address)->GetArena();
    if (message_arena != submessage_arena) {
      address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, address, submessage_arena);
    }
    
  } else {
    
  }
  address_ = address;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmergencyContact.address)
}

// -------------------------------------------------------------------

// EmployeeInformationEvent

// string uuid = 1;
inline void EmployeeInformationEvent::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::uuid() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
  return _internal_uuid();
}
inline void EmployeeInformationEvent::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
}
inline std::string* EmployeeInformationEvent::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& EmployeeInformationEvent::_internal_uuid() const {
  return uuid_.Get();
}
inline void EmployeeInformationEvent::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
}
inline void EmployeeInformationEvent::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
}
inline void EmployeeInformationEvent::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_uuid() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.uuid)
}

// int64 id = 2;
inline void EmployeeInformationEvent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInformationEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInformationEvent::id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.id)
  return _internal_id();
}
inline void EmployeeInformationEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void EmployeeInformationEvent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool EmployeeInformationEvent::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool EmployeeInformationEvent::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInformationEvent::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInformationEvent::created_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.created_at)
  return _internal_created_at();
}
inline void EmployeeInformationEvent::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.created_at)
  return _internal_mutable_created_at();
}
inline void EmployeeInformationEvent::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.created_at)
}

// .google.protobuf.Timestamp updated_at = 4;
inline bool EmployeeInformationEvent::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool EmployeeInformationEvent::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInformationEvent::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInformationEvent::updated_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.updated_at)
  return _internal_updated_at();
}
inline void EmployeeInformationEvent::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInformationEvent::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.updated_at)
  return _internal_mutable_updated_at();
}
inline void EmployeeInformationEvent::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.updated_at)
}

// int64 company_id = 5;
inline void EmployeeInformationEvent::clear_company_id() {
  company_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInformationEvent::_internal_company_id() const {
  return company_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInformationEvent::company_id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.company_id)
  return _internal_company_id();
}
inline void EmployeeInformationEvent::_internal_set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  company_id_ = value;
}
inline void EmployeeInformationEvent::set_company_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_company_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.company_id)
}

// int64 employee_id = 6;
inline void EmployeeInformationEvent::clear_employee_id() {
  employee_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInformationEvent::_internal_employee_id() const {
  return employee_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInformationEvent::employee_id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.employee_id)
  return _internal_employee_id();
}
inline void EmployeeInformationEvent::_internal_set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  employee_id_ = value;
}
inline void EmployeeInformationEvent::set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_employee_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.employee_id)
}

// string first_name = 7;
inline void EmployeeInformationEvent::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::first_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
  return _internal_first_name();
}
inline void EmployeeInformationEvent::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
}
inline std::string* EmployeeInformationEvent::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& EmployeeInformationEvent::_internal_first_name() const {
  return first_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_first_name(std::string&& value) {
  
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
}
inline void EmployeeInformationEvent::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
}
inline void EmployeeInformationEvent::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_first_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.first_name)
}

// string middle_name = 8;
inline void EmployeeInformationEvent::clear_middle_name() {
  middle_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::middle_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
  return _internal_middle_name();
}
inline void EmployeeInformationEvent::set_middle_name(const std::string& value) {
  _internal_set_middle_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
}
inline std::string* EmployeeInformationEvent::mutable_middle_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
  return _internal_mutable_middle_name();
}
inline const std::string& EmployeeInformationEvent::_internal_middle_name() const {
  return middle_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_middle_name(const std::string& value) {
  
  middle_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_middle_name(std::string&& value) {
  
  middle_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
}
inline void EmployeeInformationEvent::set_middle_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  middle_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
}
inline void EmployeeInformationEvent::set_middle_name(const char* value,
    size_t size) {
  
  middle_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_middle_name() {
  
  return middle_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_middle_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
  return middle_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_middle_name(std::string* middle_name) {
  if (middle_name != nullptr) {
    
  } else {
    
  }
  middle_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), middle_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.middle_name)
}

// string last_name = 9;
inline void EmployeeInformationEvent::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::last_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
  return _internal_last_name();
}
inline void EmployeeInformationEvent::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
}
inline std::string* EmployeeInformationEvent::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& EmployeeInformationEvent::_internal_last_name() const {
  return last_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_last_name(std::string&& value) {
  
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
}
inline void EmployeeInformationEvent::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
}
inline void EmployeeInformationEvent::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_last_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.last_name)
}

// string prior_last_name = 10;
inline void EmployeeInformationEvent::clear_prior_last_name() {
  prior_last_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::prior_last_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
  return _internal_prior_last_name();
}
inline void EmployeeInformationEvent::set_prior_last_name(const std::string& value) {
  _internal_set_prior_last_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
}
inline std::string* EmployeeInformationEvent::mutable_prior_last_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
  return _internal_mutable_prior_last_name();
}
inline const std::string& EmployeeInformationEvent::_internal_prior_last_name() const {
  return prior_last_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_prior_last_name(const std::string& value) {
  
  prior_last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_prior_last_name(std::string&& value) {
  
  prior_last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
}
inline void EmployeeInformationEvent::set_prior_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prior_last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
}
inline void EmployeeInformationEvent::set_prior_last_name(const char* value,
    size_t size) {
  
  prior_last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_prior_last_name() {
  
  return prior_last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_prior_last_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
  return prior_last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_prior_last_name(std::string* prior_last_name) {
  if (prior_last_name != nullptr) {
    
  } else {
    
  }
  prior_last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prior_last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prior_last_name)
}

// string prefered_name = 11;
inline void EmployeeInformationEvent::clear_prefered_name() {
  prefered_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::prefered_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
  return _internal_prefered_name();
}
inline void EmployeeInformationEvent::set_prefered_name(const std::string& value) {
  _internal_set_prefered_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
}
inline std::string* EmployeeInformationEvent::mutable_prefered_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
  return _internal_mutable_prefered_name();
}
inline const std::string& EmployeeInformationEvent::_internal_prefered_name() const {
  return prefered_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_prefered_name(const std::string& value) {
  
  prefered_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_prefered_name(std::string&& value) {
  
  prefered_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
}
inline void EmployeeInformationEvent::set_prefered_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  prefered_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
}
inline void EmployeeInformationEvent::set_prefered_name(const char* value,
    size_t size) {
  
  prefered_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_prefered_name() {
  
  return prefered_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_prefered_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
  return prefered_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_prefered_name(std::string* prefered_name) {
  if (prefered_name != nullptr) {
    
  } else {
    
  }
  prefered_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prefered_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.prefered_name)
}

// string salutation = 12;
inline void EmployeeInformationEvent::clear_salutation() {
  salutation_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::salutation() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
  return _internal_salutation();
}
inline void EmployeeInformationEvent::set_salutation(const std::string& value) {
  _internal_set_salutation(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
}
inline std::string* EmployeeInformationEvent::mutable_salutation() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
  return _internal_mutable_salutation();
}
inline const std::string& EmployeeInformationEvent::_internal_salutation() const {
  return salutation_.Get();
}
inline void EmployeeInformationEvent::_internal_set_salutation(const std::string& value) {
  
  salutation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_salutation(std::string&& value) {
  
  salutation_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
}
inline void EmployeeInformationEvent::set_salutation(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  salutation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
}
inline void EmployeeInformationEvent::set_salutation(const char* value,
    size_t size) {
  
  salutation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_salutation() {
  
  return salutation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_salutation() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
  return salutation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_salutation(std::string* salutation) {
  if (salutation != nullptr) {
    
  } else {
    
  }
  salutation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), salutation,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.salutation)
}

// string ethnicity = 13;
inline void EmployeeInformationEvent::clear_ethnicity() {
  ethnicity_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::ethnicity() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
  return _internal_ethnicity();
}
inline void EmployeeInformationEvent::set_ethnicity(const std::string& value) {
  _internal_set_ethnicity(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
}
inline std::string* EmployeeInformationEvent::mutable_ethnicity() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
  return _internal_mutable_ethnicity();
}
inline const std::string& EmployeeInformationEvent::_internal_ethnicity() const {
  return ethnicity_.Get();
}
inline void EmployeeInformationEvent::_internal_set_ethnicity(const std::string& value) {
  
  ethnicity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_ethnicity(std::string&& value) {
  
  ethnicity_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
}
inline void EmployeeInformationEvent::set_ethnicity(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ethnicity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
}
inline void EmployeeInformationEvent::set_ethnicity(const char* value,
    size_t size) {
  
  ethnicity_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_ethnicity() {
  
  return ethnicity_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_ethnicity() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
  return ethnicity_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_ethnicity(std::string* ethnicity) {
  if (ethnicity != nullptr) {
    
  } else {
    
  }
  ethnicity_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ethnicity,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ethnicity)
}

// string gender = 14;
inline void EmployeeInformationEvent::clear_gender() {
  gender_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::gender() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
  return _internal_gender();
}
inline void EmployeeInformationEvent::set_gender(const std::string& value) {
  _internal_set_gender(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
}
inline std::string* EmployeeInformationEvent::mutable_gender() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
  return _internal_mutable_gender();
}
inline const std::string& EmployeeInformationEvent::_internal_gender() const {
  return gender_.Get();
}
inline void EmployeeInformationEvent::_internal_set_gender(const std::string& value) {
  
  gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_gender(std::string&& value) {
  
  gender_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
}
inline void EmployeeInformationEvent::set_gender(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
}
inline void EmployeeInformationEvent::set_gender(const char* value,
    size_t size) {
  
  gender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_gender() {
  
  return gender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_gender() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
  return gender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_gender(std::string* gender) {
  if (gender != nullptr) {
    
  } else {
    
  }
  gender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gender,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.gender)
}

// .Workstream.Protocol.Onboarding.MaritalStatus marital_status = 15;
inline void EmployeeInformationEvent::clear_marital_status() {
  marital_status_ = 0;
}
inline ::Workstream::Protocol::Onboarding::MaritalStatus EmployeeInformationEvent::_internal_marital_status() const {
  return static_cast< ::Workstream::Protocol::Onboarding::MaritalStatus >(marital_status_);
}
inline ::Workstream::Protocol::Onboarding::MaritalStatus EmployeeInformationEvent::marital_status() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.marital_status)
  return _internal_marital_status();
}
inline void EmployeeInformationEvent::_internal_set_marital_status(::Workstream::Protocol::Onboarding::MaritalStatus value) {
  
  marital_status_ = value;
}
inline void EmployeeInformationEvent::set_marital_status(::Workstream::Protocol::Onboarding::MaritalStatus value) {
  _internal_set_marital_status(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.marital_status)
}

// string ssn = 16;
inline void EmployeeInformationEvent::clear_ssn() {
  ssn_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::ssn() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
  return _internal_ssn();
}
inline void EmployeeInformationEvent::set_ssn(const std::string& value) {
  _internal_set_ssn(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
}
inline std::string* EmployeeInformationEvent::mutable_ssn() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
  return _internal_mutable_ssn();
}
inline const std::string& EmployeeInformationEvent::_internal_ssn() const {
  return ssn_.Get();
}
inline void EmployeeInformationEvent::_internal_set_ssn(const std::string& value) {
  
  ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_ssn(std::string&& value) {
  
  ssn_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
}
inline void EmployeeInformationEvent::set_ssn(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
}
inline void EmployeeInformationEvent::set_ssn(const char* value,
    size_t size) {
  
  ssn_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_ssn() {
  
  return ssn_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_ssn() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
  return ssn_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_ssn(std::string* ssn) {
  if (ssn != nullptr) {
    
  } else {
    
  }
  ssn_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ssn,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.ssn)
}

// bool smoker = 17;
inline void EmployeeInformationEvent::clear_smoker() {
  smoker_ = false;
}
inline bool EmployeeInformationEvent::_internal_smoker() const {
  return smoker_;
}
inline bool EmployeeInformationEvent::smoker() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.smoker)
  return _internal_smoker();
}
inline void EmployeeInformationEvent::_internal_set_smoker(bool value) {
  
  smoker_ = value;
}
inline void EmployeeInformationEvent::set_smoker(bool value) {
  _internal_set_smoker(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.smoker)
}

// string nationality = 18;
inline void EmployeeInformationEvent::clear_nationality() {
  nationality_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::nationality() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
  return _internal_nationality();
}
inline void EmployeeInformationEvent::set_nationality(const std::string& value) {
  _internal_set_nationality(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
}
inline std::string* EmployeeInformationEvent::mutable_nationality() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
  return _internal_mutable_nationality();
}
inline const std::string& EmployeeInformationEvent::_internal_nationality() const {
  return nationality_.Get();
}
inline void EmployeeInformationEvent::_internal_set_nationality(const std::string& value) {
  
  nationality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_nationality(std::string&& value) {
  
  nationality_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
}
inline void EmployeeInformationEvent::set_nationality(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  nationality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
}
inline void EmployeeInformationEvent::set_nationality(const char* value,
    size_t size) {
  
  nationality_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_nationality() {
  
  return nationality_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_nationality() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
  return nationality_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_nationality(std::string* nationality) {
  if (nationality != nullptr) {
    
  } else {
    
  }
  nationality_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nationality,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.nationality)
}

// string date_of_birth = 19;
inline void EmployeeInformationEvent::clear_date_of_birth() {
  date_of_birth_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::date_of_birth() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
  return _internal_date_of_birth();
}
inline void EmployeeInformationEvent::set_date_of_birth(const std::string& value) {
  _internal_set_date_of_birth(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
}
inline std::string* EmployeeInformationEvent::mutable_date_of_birth() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
  return _internal_mutable_date_of_birth();
}
inline const std::string& EmployeeInformationEvent::_internal_date_of_birth() const {
  return date_of_birth_.Get();
}
inline void EmployeeInformationEvent::_internal_set_date_of_birth(const std::string& value) {
  
  date_of_birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_date_of_birth(std::string&& value) {
  
  date_of_birth_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
}
inline void EmployeeInformationEvent::set_date_of_birth(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  date_of_birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
}
inline void EmployeeInformationEvent::set_date_of_birth(const char* value,
    size_t size) {
  
  date_of_birth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_date_of_birth() {
  
  return date_of_birth_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_date_of_birth() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
  return date_of_birth_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_date_of_birth(std::string* date_of_birth) {
  if (date_of_birth != nullptr) {
    
  } else {
    
  }
  date_of_birth_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), date_of_birth,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.date_of_birth)
}

// string home_email = 31;
inline void EmployeeInformationEvent::clear_home_email() {
  home_email_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::home_email() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
  return _internal_home_email();
}
inline void EmployeeInformationEvent::set_home_email(const std::string& value) {
  _internal_set_home_email(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
}
inline std::string* EmployeeInformationEvent::mutable_home_email() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
  return _internal_mutable_home_email();
}
inline const std::string& EmployeeInformationEvent::_internal_home_email() const {
  return home_email_.Get();
}
inline void EmployeeInformationEvent::_internal_set_home_email(const std::string& value) {
  
  home_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_home_email(std::string&& value) {
  
  home_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
}
inline void EmployeeInformationEvent::set_home_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  home_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
}
inline void EmployeeInformationEvent::set_home_email(const char* value,
    size_t size) {
  
  home_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_home_email() {
  
  return home_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_home_email() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
  return home_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_home_email(std::string* home_email) {
  if (home_email != nullptr) {
    
  } else {
    
  }
  home_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), home_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_email)
}

// .Workstream.Protocol.Common.Phone home_phone = 32;
inline bool EmployeeInformationEvent::_internal_has_home_phone() const {
  return this != internal_default_instance() && home_phone_ != nullptr;
}
inline bool EmployeeInformationEvent::has_home_phone() const {
  return _internal_has_home_phone();
}
inline const ::Workstream::Protocol::Common::Phone& EmployeeInformationEvent::_internal_home_phone() const {
  const ::Workstream::Protocol::Common::Phone* p = home_phone_;
  return p != nullptr ? *p : reinterpret_cast<const ::Workstream::Protocol::Common::Phone&>(
      ::Workstream::Protocol::Common::_Phone_default_instance_);
}
inline const ::Workstream::Protocol::Common::Phone& EmployeeInformationEvent::home_phone() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_phone)
  return _internal_home_phone();
}
inline void EmployeeInformationEvent::unsafe_arena_set_allocated_home_phone(
    ::Workstream::Protocol::Common::Phone* home_phone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_phone_);
  }
  home_phone_ = home_phone;
  if (home_phone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_phone)
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::release_home_phone() {
  
  ::Workstream::Protocol::Common::Phone* temp = home_phone_;
  home_phone_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::unsafe_arena_release_home_phone() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_phone)
  
  ::Workstream::Protocol::Common::Phone* temp = home_phone_;
  home_phone_ = nullptr;
  return temp;
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::_internal_mutable_home_phone() {
  
  if (home_phone_ == nullptr) {
    auto* p = CreateMaybeMessage<::Workstream::Protocol::Common::Phone>(GetArena());
    home_phone_ = p;
  }
  return home_phone_;
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::mutable_home_phone() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_phone)
  return _internal_mutable_home_phone();
}
inline void EmployeeInformationEvent::set_allocated_home_phone(::Workstream::Protocol::Common::Phone* home_phone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_phone_);
  }
  if (home_phone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_phone)->GetArena();
    if (message_arena != submessage_arena) {
      home_phone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home_phone, submessage_arena);
    }
    
  } else {
    
  }
  home_phone_ = home_phone;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_phone)
}

// .Workstream.Protocol.Common.Address home_address = 33;
inline bool EmployeeInformationEvent::_internal_has_home_address() const {
  return this != internal_default_instance() && home_address_ != nullptr;
}
inline bool EmployeeInformationEvent::has_home_address() const {
  return _internal_has_home_address();
}
inline const ::Workstream::Protocol::Common::Address& EmployeeInformationEvent::_internal_home_address() const {
  const ::Workstream::Protocol::Common::Address* p = home_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::Workstream::Protocol::Common::Address&>(
      ::Workstream::Protocol::Common::_Address_default_instance_);
}
inline const ::Workstream::Protocol::Common::Address& EmployeeInformationEvent::home_address() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_address)
  return _internal_home_address();
}
inline void EmployeeInformationEvent::unsafe_arena_set_allocated_home_address(
    ::Workstream::Protocol::Common::Address* home_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_address_);
  }
  home_address_ = home_address;
  if (home_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_address)
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::release_home_address() {
  
  ::Workstream::Protocol::Common::Address* temp = home_address_;
  home_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::unsafe_arena_release_home_address() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_address)
  
  ::Workstream::Protocol::Common::Address* temp = home_address_;
  home_address_ = nullptr;
  return temp;
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::_internal_mutable_home_address() {
  
  if (home_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Workstream::Protocol::Common::Address>(GetArena());
    home_address_ = p;
  }
  return home_address_;
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::mutable_home_address() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_address)
  return _internal_mutable_home_address();
}
inline void EmployeeInformationEvent::set_allocated_home_address(::Workstream::Protocol::Common::Address* home_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_address_);
  }
  if (home_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(home_address)->GetArena();
    if (message_arena != submessage_arena) {
      home_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, home_address, submessage_arena);
    }
    
  } else {
    
  }
  home_address_ = home_address;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.home_address)
}

// string work_location_name = 41;
inline void EmployeeInformationEvent::clear_work_location_name() {
  work_location_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::work_location_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
  return _internal_work_location_name();
}
inline void EmployeeInformationEvent::set_work_location_name(const std::string& value) {
  _internal_set_work_location_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
}
inline std::string* EmployeeInformationEvent::mutable_work_location_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
  return _internal_mutable_work_location_name();
}
inline const std::string& EmployeeInformationEvent::_internal_work_location_name() const {
  return work_location_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_work_location_name(const std::string& value) {
  
  work_location_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_work_location_name(std::string&& value) {
  
  work_location_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
}
inline void EmployeeInformationEvent::set_work_location_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  work_location_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
}
inline void EmployeeInformationEvent::set_work_location_name(const char* value,
    size_t size) {
  
  work_location_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_work_location_name() {
  
  return work_location_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_work_location_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
  return work_location_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_work_location_name(std::string* work_location_name) {
  if (work_location_name != nullptr) {
    
  } else {
    
  }
  work_location_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), work_location_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_location_name)
}

// string work_email = 42;
inline void EmployeeInformationEvent::clear_work_email() {
  work_email_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::work_email() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
  return _internal_work_email();
}
inline void EmployeeInformationEvent::set_work_email(const std::string& value) {
  _internal_set_work_email(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
}
inline std::string* EmployeeInformationEvent::mutable_work_email() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
  return _internal_mutable_work_email();
}
inline const std::string& EmployeeInformationEvent::_internal_work_email() const {
  return work_email_.Get();
}
inline void EmployeeInformationEvent::_internal_set_work_email(const std::string& value) {
  
  work_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_work_email(std::string&& value) {
  
  work_email_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
}
inline void EmployeeInformationEvent::set_work_email(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  work_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
}
inline void EmployeeInformationEvent::set_work_email(const char* value,
    size_t size) {
  
  work_email_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_work_email() {
  
  return work_email_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_work_email() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
  return work_email_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_work_email(std::string* work_email) {
  if (work_email != nullptr) {
    
  } else {
    
  }
  work_email_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), work_email,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_email)
}

// .Workstream.Protocol.Common.Phone work_phone = 43;
inline bool EmployeeInformationEvent::_internal_has_work_phone() const {
  return this != internal_default_instance() && work_phone_ != nullptr;
}
inline bool EmployeeInformationEvent::has_work_phone() const {
  return _internal_has_work_phone();
}
inline const ::Workstream::Protocol::Common::Phone& EmployeeInformationEvent::_internal_work_phone() const {
  const ::Workstream::Protocol::Common::Phone* p = work_phone_;
  return p != nullptr ? *p : reinterpret_cast<const ::Workstream::Protocol::Common::Phone&>(
      ::Workstream::Protocol::Common::_Phone_default_instance_);
}
inline const ::Workstream::Protocol::Common::Phone& EmployeeInformationEvent::work_phone() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_phone)
  return _internal_work_phone();
}
inline void EmployeeInformationEvent::unsafe_arena_set_allocated_work_phone(
    ::Workstream::Protocol::Common::Phone* work_phone) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_phone_);
  }
  work_phone_ = work_phone;
  if (work_phone) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_phone)
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::release_work_phone() {
  
  ::Workstream::Protocol::Common::Phone* temp = work_phone_;
  work_phone_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::unsafe_arena_release_work_phone() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_phone)
  
  ::Workstream::Protocol::Common::Phone* temp = work_phone_;
  work_phone_ = nullptr;
  return temp;
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::_internal_mutable_work_phone() {
  
  if (work_phone_ == nullptr) {
    auto* p = CreateMaybeMessage<::Workstream::Protocol::Common::Phone>(GetArena());
    work_phone_ = p;
  }
  return work_phone_;
}
inline ::Workstream::Protocol::Common::Phone* EmployeeInformationEvent::mutable_work_phone() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_phone)
  return _internal_mutable_work_phone();
}
inline void EmployeeInformationEvent::set_allocated_work_phone(::Workstream::Protocol::Common::Phone* work_phone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_phone_);
  }
  if (work_phone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_phone)->GetArena();
    if (message_arena != submessage_arena) {
      work_phone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_phone, submessage_arena);
    }
    
  } else {
    
  }
  work_phone_ = work_phone;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_phone)
}

// .Workstream.Protocol.Common.Address work_address = 44;
inline bool EmployeeInformationEvent::_internal_has_work_address() const {
  return this != internal_default_instance() && work_address_ != nullptr;
}
inline bool EmployeeInformationEvent::has_work_address() const {
  return _internal_has_work_address();
}
inline const ::Workstream::Protocol::Common::Address& EmployeeInformationEvent::_internal_work_address() const {
  const ::Workstream::Protocol::Common::Address* p = work_address_;
  return p != nullptr ? *p : reinterpret_cast<const ::Workstream::Protocol::Common::Address&>(
      ::Workstream::Protocol::Common::_Address_default_instance_);
}
inline const ::Workstream::Protocol::Common::Address& EmployeeInformationEvent::work_address() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_address)
  return _internal_work_address();
}
inline void EmployeeInformationEvent::unsafe_arena_set_allocated_work_address(
    ::Workstream::Protocol::Common::Address* work_address) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_address_);
  }
  work_address_ = work_address;
  if (work_address) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_address)
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::release_work_address() {
  
  ::Workstream::Protocol::Common::Address* temp = work_address_;
  work_address_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::unsafe_arena_release_work_address() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_address)
  
  ::Workstream::Protocol::Common::Address* temp = work_address_;
  work_address_ = nullptr;
  return temp;
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::_internal_mutable_work_address() {
  
  if (work_address_ == nullptr) {
    auto* p = CreateMaybeMessage<::Workstream::Protocol::Common::Address>(GetArena());
    work_address_ = p;
  }
  return work_address_;
}
inline ::Workstream::Protocol::Common::Address* EmployeeInformationEvent::mutable_work_address() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_address)
  return _internal_mutable_work_address();
}
inline void EmployeeInformationEvent::set_allocated_work_address(::Workstream::Protocol::Common::Address* work_address) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_address_);
  }
  if (work_address) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_address)->GetArena();
    if (message_arena != submessage_arena) {
      work_address = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_address, submessage_arena);
    }
    
  } else {
    
  }
  work_address_ = work_address;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.work_address)
}

// repeated .Workstream.Protocol.Onboarding.EmergencyContact emergency_contact = 51;
inline int EmployeeInformationEvent::_internal_emergency_contact_size() const {
  return emergency_contact_.size();
}
inline int EmployeeInformationEvent::emergency_contact_size() const {
  return _internal_emergency_contact_size();
}
inline void EmployeeInformationEvent::clear_emergency_contact() {
  emergency_contact_.Clear();
}
inline ::Workstream::Protocol::Onboarding::EmergencyContact* EmployeeInformationEvent::mutable_emergency_contact(int index) {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.emergency_contact)
  return emergency_contact_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Workstream::Protocol::Onboarding::EmergencyContact >*
EmployeeInformationEvent::mutable_emergency_contact() {
  // @@protoc_insertion_point(field_mutable_list:Workstream.Protocol.Onboarding.EmployeeInformationEvent.emergency_contact)
  return &emergency_contact_;
}
inline const ::Workstream::Protocol::Onboarding::EmergencyContact& EmployeeInformationEvent::_internal_emergency_contact(int index) const {
  return emergency_contact_.Get(index);
}
inline const ::Workstream::Protocol::Onboarding::EmergencyContact& EmployeeInformationEvent::emergency_contact(int index) const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.emergency_contact)
  return _internal_emergency_contact(index);
}
inline ::Workstream::Protocol::Onboarding::EmergencyContact* EmployeeInformationEvent::_internal_add_emergency_contact() {
  return emergency_contact_.Add();
}
inline ::Workstream::Protocol::Onboarding::EmergencyContact* EmployeeInformationEvent::add_emergency_contact() {
  // @@protoc_insertion_point(field_add:Workstream.Protocol.Onboarding.EmployeeInformationEvent.emergency_contact)
  return _internal_add_emergency_contact();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Workstream::Protocol::Onboarding::EmergencyContact >&
EmployeeInformationEvent::emergency_contact() const {
  // @@protoc_insertion_point(field_list:Workstream.Protocol.Onboarding.EmployeeInformationEvent.emergency_contact)
  return emergency_contact_;
}

// string apply_date = 52;
inline void EmployeeInformationEvent::clear_apply_date() {
  apply_date_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::apply_date() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
  return _internal_apply_date();
}
inline void EmployeeInformationEvent::set_apply_date(const std::string& value) {
  _internal_set_apply_date(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
}
inline std::string* EmployeeInformationEvent::mutable_apply_date() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
  return _internal_mutable_apply_date();
}
inline const std::string& EmployeeInformationEvent::_internal_apply_date() const {
  return apply_date_.Get();
}
inline void EmployeeInformationEvent::_internal_set_apply_date(const std::string& value) {
  
  apply_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_apply_date(std::string&& value) {
  
  apply_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
}
inline void EmployeeInformationEvent::set_apply_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  apply_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
}
inline void EmployeeInformationEvent::set_apply_date(const char* value,
    size_t size) {
  
  apply_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_apply_date() {
  
  return apply_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_apply_date() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
  return apply_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_apply_date(std::string* apply_date) {
  if (apply_date != nullptr) {
    
  } else {
    
  }
  apply_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), apply_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.apply_date)
}

// string hire_date = 53;
inline void EmployeeInformationEvent::clear_hire_date() {
  hire_date_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::hire_date() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
  return _internal_hire_date();
}
inline void EmployeeInformationEvent::set_hire_date(const std::string& value) {
  _internal_set_hire_date(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
}
inline std::string* EmployeeInformationEvent::mutable_hire_date() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
  return _internal_mutable_hire_date();
}
inline const std::string& EmployeeInformationEvent::_internal_hire_date() const {
  return hire_date_.Get();
}
inline void EmployeeInformationEvent::_internal_set_hire_date(const std::string& value) {
  
  hire_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_hire_date(std::string&& value) {
  
  hire_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
}
inline void EmployeeInformationEvent::set_hire_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hire_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
}
inline void EmployeeInformationEvent::set_hire_date(const char* value,
    size_t size) {
  
  hire_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_hire_date() {
  
  return hire_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_hire_date() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
  return hire_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_hire_date(std::string* hire_date) {
  if (hire_date != nullptr) {
    
  } else {
    
  }
  hire_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hire_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.hire_date)
}

// string start_date = 54;
inline void EmployeeInformationEvent::clear_start_date() {
  start_date_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::start_date() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
  return _internal_start_date();
}
inline void EmployeeInformationEvent::set_start_date(const std::string& value) {
  _internal_set_start_date(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
}
inline std::string* EmployeeInformationEvent::mutable_start_date() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
  return _internal_mutable_start_date();
}
inline const std::string& EmployeeInformationEvent::_internal_start_date() const {
  return start_date_.Get();
}
inline void EmployeeInformationEvent::_internal_set_start_date(const std::string& value) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_start_date(std::string&& value) {
  
  start_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
}
inline void EmployeeInformationEvent::set_start_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
}
inline void EmployeeInformationEvent::set_start_date(const char* value,
    size_t size) {
  
  start_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_start_date() {
  
  return start_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_start_date() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
  return start_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_start_date(std::string* start_date) {
  if (start_date != nullptr) {
    
  } else {
    
  }
  start_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), start_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.start_date)
}

// string termination_date = 55;
inline void EmployeeInformationEvent::clear_termination_date() {
  termination_date_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::termination_date() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
  return _internal_termination_date();
}
inline void EmployeeInformationEvent::set_termination_date(const std::string& value) {
  _internal_set_termination_date(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
}
inline std::string* EmployeeInformationEvent::mutable_termination_date() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
  return _internal_mutable_termination_date();
}
inline const std::string& EmployeeInformationEvent::_internal_termination_date() const {
  return termination_date_.Get();
}
inline void EmployeeInformationEvent::_internal_set_termination_date(const std::string& value) {
  
  termination_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_termination_date(std::string&& value) {
  
  termination_date_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
}
inline void EmployeeInformationEvent::set_termination_date(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  termination_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
}
inline void EmployeeInformationEvent::set_termination_date(const char* value,
    size_t size) {
  
  termination_date_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_termination_date() {
  
  return termination_date_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_termination_date() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
  return termination_date_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_termination_date(std::string* termination_date) {
  if (termination_date != nullptr) {
    
  } else {
    
  }
  termination_date_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), termination_date,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.termination_date)
}

// string job_title = 56;
inline void EmployeeInformationEvent::clear_job_title() {
  job_title_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::job_title() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
  return _internal_job_title();
}
inline void EmployeeInformationEvent::set_job_title(const std::string& value) {
  _internal_set_job_title(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
}
inline std::string* EmployeeInformationEvent::mutable_job_title() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
  return _internal_mutable_job_title();
}
inline const std::string& EmployeeInformationEvent::_internal_job_title() const {
  return job_title_.Get();
}
inline void EmployeeInformationEvent::_internal_set_job_title(const std::string& value) {
  
  job_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_job_title(std::string&& value) {
  
  job_title_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
}
inline void EmployeeInformationEvent::set_job_title(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  job_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
}
inline void EmployeeInformationEvent::set_job_title(const char* value,
    size_t size) {
  
  job_title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_job_title() {
  
  return job_title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_job_title() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
  return job_title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_job_title(std::string* job_title) {
  if (job_title != nullptr) {
    
  } else {
    
  }
  job_title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), job_title,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.job_title)
}

// string department_name = 57;
inline void EmployeeInformationEvent::clear_department_name() {
  department_name_.ClearToEmpty();
}
inline const std::string& EmployeeInformationEvent::department_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
  return _internal_department_name();
}
inline void EmployeeInformationEvent::set_department_name(const std::string& value) {
  _internal_set_department_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
}
inline std::string* EmployeeInformationEvent::mutable_department_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
  return _internal_mutable_department_name();
}
inline const std::string& EmployeeInformationEvent::_internal_department_name() const {
  return department_name_.Get();
}
inline void EmployeeInformationEvent::_internal_set_department_name(const std::string& value) {
  
  department_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInformationEvent::set_department_name(std::string&& value) {
  
  department_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
}
inline void EmployeeInformationEvent::set_department_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  department_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
}
inline void EmployeeInformationEvent::set_department_name(const char* value,
    size_t size) {
  
  department_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
}
inline std::string* EmployeeInformationEvent::_internal_mutable_department_name() {
  
  return department_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInformationEvent::release_department_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
  return department_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInformationEvent::set_allocated_department_name(std::string* department_name) {
  if (department_name != nullptr) {
    
  } else {
    
  }
  department_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), department_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInformationEvent.department_name)
}

// -------------------------------------------------------------------

// EmployeeInitialStateEvent

// string uuid = 1;
inline void EmployeeInitialStateEvent::clear_uuid() {
  uuid_.ClearToEmpty();
}
inline const std::string& EmployeeInitialStateEvent::uuid() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
  return _internal_uuid();
}
inline void EmployeeInitialStateEvent::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
}
inline std::string* EmployeeInitialStateEvent::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& EmployeeInitialStateEvent::_internal_uuid() const {
  return uuid_.Get();
}
inline void EmployeeInitialStateEvent::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInitialStateEvent::set_uuid(std::string&& value) {
  
  uuid_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
}
inline void EmployeeInitialStateEvent::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
}
inline void EmployeeInitialStateEvent::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
}
inline std::string* EmployeeInitialStateEvent::_internal_mutable_uuid() {
  
  return uuid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInitialStateEvent::release_uuid() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInitialStateEvent::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.uuid)
}

// int64 id = 2;
inline void EmployeeInitialStateEvent::clear_id() {
  id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInitialStateEvent::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInitialStateEvent::id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.id)
  return _internal_id();
}
inline void EmployeeInitialStateEvent::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  id_ = value;
}
inline void EmployeeInitialStateEvent::set_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.id)
}

// .google.protobuf.Timestamp created_at = 3;
inline bool EmployeeInitialStateEvent::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool EmployeeInitialStateEvent::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInitialStateEvent::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInitialStateEvent::created_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.created_at)
  return _internal_created_at();
}
inline void EmployeeInitialStateEvent::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.created_at)
  return _internal_mutable_created_at();
}
inline void EmployeeInitialStateEvent::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.created_at)
}

// .google.protobuf.Timestamp updated_at = 4;
inline bool EmployeeInitialStateEvent::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool EmployeeInitialStateEvent::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInitialStateEvent::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& EmployeeInitialStateEvent::updated_at() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.updated_at)
  return _internal_updated_at();
}
inline void EmployeeInitialStateEvent::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* EmployeeInitialStateEvent::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.updated_at)
  return _internal_mutable_updated_at();
}
inline void EmployeeInitialStateEvent::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.updated_at)
}

// int64 employee_id = 5;
inline void EmployeeInitialStateEvent::clear_employee_id() {
  employee_id_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInitialStateEvent::_internal_employee_id() const {
  return employee_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 EmployeeInitialStateEvent::employee_id() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.employee_id)
  return _internal_employee_id();
}
inline void EmployeeInitialStateEvent::_internal_set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  employee_id_ = value;
}
inline void EmployeeInitialStateEvent::set_employee_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_employee_id(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.employee_id)
}

// string first_name = 6;
inline void EmployeeInitialStateEvent::clear_first_name() {
  first_name_.ClearToEmpty();
}
inline const std::string& EmployeeInitialStateEvent::first_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
  return _internal_first_name();
}
inline void EmployeeInitialStateEvent::set_first_name(const std::string& value) {
  _internal_set_first_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
}
inline std::string* EmployeeInitialStateEvent::mutable_first_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
  return _internal_mutable_first_name();
}
inline const std::string& EmployeeInitialStateEvent::_internal_first_name() const {
  return first_name_.Get();
}
inline void EmployeeInitialStateEvent::_internal_set_first_name(const std::string& value) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInitialStateEvent::set_first_name(std::string&& value) {
  
  first_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
}
inline void EmployeeInitialStateEvent::set_first_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
}
inline void EmployeeInitialStateEvent::set_first_name(const char* value,
    size_t size) {
  
  first_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
}
inline std::string* EmployeeInitialStateEvent::_internal_mutable_first_name() {
  
  return first_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInitialStateEvent::release_first_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
  return first_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInitialStateEvent::set_allocated_first_name(std::string* first_name) {
  if (first_name != nullptr) {
    
  } else {
    
  }
  first_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), first_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.first_name)
}

// string last_name = 7;
inline void EmployeeInitialStateEvent::clear_last_name() {
  last_name_.ClearToEmpty();
}
inline const std::string& EmployeeInitialStateEvent::last_name() const {
  // @@protoc_insertion_point(field_get:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
  return _internal_last_name();
}
inline void EmployeeInitialStateEvent::set_last_name(const std::string& value) {
  _internal_set_last_name(value);
  // @@protoc_insertion_point(field_set:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
}
inline std::string* EmployeeInitialStateEvent::mutable_last_name() {
  // @@protoc_insertion_point(field_mutable:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
  return _internal_mutable_last_name();
}
inline const std::string& EmployeeInitialStateEvent::_internal_last_name() const {
  return last_name_.Get();
}
inline void EmployeeInitialStateEvent::_internal_set_last_name(const std::string& value) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void EmployeeInitialStateEvent::set_last_name(std::string&& value) {
  
  last_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
}
inline void EmployeeInitialStateEvent::set_last_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
}
inline void EmployeeInitialStateEvent::set_last_name(const char* value,
    size_t size) {
  
  last_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
}
inline std::string* EmployeeInitialStateEvent::_internal_mutable_last_name() {
  
  return last_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* EmployeeInitialStateEvent::release_last_name() {
  // @@protoc_insertion_point(field_release:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
  return last_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void EmployeeInitialStateEvent::set_allocated_last_name(std::string* last_name) {
  if (last_name != nullptr) {
    
  } else {
    
  }
  last_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), last_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Workstream.Protocol.Onboarding.EmployeeInitialStateEvent.last_name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Onboarding
}  // namespace Protocol
}  // namespace Workstream

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus>() {
  return ::Workstream::Protocol::Onboarding::CompanyEvent_CompanyStatus_descriptor();
}
template <> struct is_proto_enum< ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus>() {
  return ::Workstream::Protocol::Onboarding::CompanyStaffEvent_CompanyStaffStatus_descriptor();
}
template <> struct is_proto_enum< ::Workstream::Protocol::Onboarding::MaritalStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Workstream::Protocol::Onboarding::MaritalStatus>() {
  return ::Workstream::Protocol::Onboarding::MaritalStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Onboarding_2eproto
