// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/CountryCode.proto

#include "Common/CountryCode.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace Workstream {
namespace Protocol {
namespace Common {
}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream
static constexpr ::PROTOBUF_NAMESPACE_ID::Metadata* file_level_metadata_Common_2fCountryCode_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_Common_2fCountryCode_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_Common_2fCountryCode_2eproto = nullptr;
const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Common_2fCountryCode_2eproto::offsets[1] = {};
static constexpr ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema* schemas = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::Message* const* file_default_instances = nullptr;

const char descriptor_table_protodef_Common_2fCountryCode_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030Common/CountryCode.proto\022\032Workstream.P"
  "rotocol.Common*\316\020\n\013CountryCode\022\006\n\002AF\020\000\022\006"
  "\n\002AX\020\001\022\006\n\002AL\020\002\022\006\n\002DZ\020\003\022\006\n\002AS\020\004\022\006\n\002AD\020\005\022\006"
  "\n\002AO\020\006\022\006\n\002AI\020\007\022\006\n\002AQ\020\010\022\006\n\002AG\020\t\022\006\n\002AR\020\n\022\006"
  "\n\002AM\020\013\022\006\n\002AW\020\014\022\006\n\002AU\020\r\022\006\n\002AT\020\016\022\006\n\002AZ\020\017\022\006"
  "\n\002BS\020\020\022\006\n\002BH\020\021\022\006\n\002BD\020\022\022\006\n\002BB\020\023\022\006\n\002BY\020\024\022\006"
  "\n\002BE\020\025\022\006\n\002BZ\020\026\022\006\n\002BJ\020\027\022\006\n\002BM\020\030\022\006\n\002BT\020\031\022\006"
  "\n\002BO\020\032\022\006\n\002BQ\020\033\022\006\n\002BA\020\034\022\006\n\002BW\020\035\022\006\n\002BV\020\036\022\006"
  "\n\002BR\020\037\022\006\n\002IO\020 \022\006\n\002BN\020!\022\006\n\002BG\020\"\022\006\n\002BF\020#\022\006"
  "\n\002BI\020$\022\006\n\002KH\020%\022\006\n\002CM\020&\022\006\n\002CA\020\'\022\006\n\002CV\020(\022\006"
  "\n\002KY\020)\022\006\n\002CF\020*\022\006\n\002TD\020+\022\006\n\002CL\020,\022\006\n\002CN\020-\022\006"
  "\n\002CX\020.\022\006\n\002CC\020/\022\006\n\002CO\0200\022\006\n\002KM\0201\022\006\n\002CG\0202\022\006"
  "\n\002CD\0203\022\006\n\002CK\0204\022\006\n\002CR\0205\022\006\n\002CI\0206\022\006\n\002HR\0207\022\006"
  "\n\002CU\0208\022\006\n\002CW\0209\022\006\n\002CY\020:\022\006\n\002CZ\020;\022\006\n\002DK\020<\022\006"
  "\n\002DJ\020=\022\006\n\002DM\020>\022\006\n\002DO\020\?\022\006\n\002EC\020@\022\006\n\002EG\020A\022\006"
  "\n\002SV\020B\022\006\n\002GQ\020C\022\006\n\002ER\020D\022\006\n\002EE\020E\022\006\n\002ET\020F\022\006"
  "\n\002FK\020G\022\006\n\002FO\020H\022\006\n\002FJ\020I\022\006\n\002FI\020J\022\006\n\002FR\020K\022\006"
  "\n\002GF\020L\022\006\n\002PF\020M\022\006\n\002TF\020N\022\006\n\002GA\020O\022\006\n\002GM\020P\022\006"
  "\n\002GE\020Q\022\006\n\002DE\020R\022\006\n\002GH\020S\022\006\n\002GI\020T\022\006\n\002GR\020U\022\006"
  "\n\002GL\020V\022\006\n\002GD\020W\022\006\n\002GP\020X\022\006\n\002GU\020Y\022\006\n\002GT\020Z\022\006"
  "\n\002GG\020[\022\006\n\002GN\020\\\022\006\n\002GW\020]\022\006\n\002GY\020^\022\006\n\002HT\020_\022\006"
  "\n\002HM\020`\022\006\n\002VA\020a\022\006\n\002HN\020b\022\006\n\002HK\020c\022\006\n\002HU\020d\022\006"
  "\n\002IS\020e\022\006\n\002IN\020f\022\006\n\002ID\020g\022\006\n\002IR\020h\022\006\n\002IQ\020i\022\006"
  "\n\002IE\020j\022\006\n\002IM\020k\022\006\n\002IL\020l\022\006\n\002IT\020m\022\006\n\002JM\020n\022\006"
  "\n\002JP\020o\022\006\n\002JE\020p\022\006\n\002JO\020q\022\006\n\002KZ\020r\022\006\n\002KE\020s\022\006"
  "\n\002KI\020t\022\006\n\002KP\020u\022\006\n\002KR\020v\022\006\n\002KW\020w\022\006\n\002KG\020x\022\006"
  "\n\002LA\020y\022\006\n\002LV\020z\022\006\n\002LB\020{\022\006\n\002LS\020|\022\006\n\002LR\020}\022\006"
  "\n\002LY\020~\022\006\n\002LI\020\177\022\007\n\002LT\020\200\001\022\007\n\002LU\020\201\001\022\007\n\002MO\020\202"
  "\001\022\007\n\002MK\020\203\001\022\007\n\002MG\020\204\001\022\007\n\002MW\020\205\001\022\007\n\002MY\020\206\001\022\007\n"
  "\002MV\020\207\001\022\007\n\002ML\020\210\001\022\007\n\002MT\020\211\001\022\007\n\002MH\020\212\001\022\007\n\002MQ\020"
  "\213\001\022\007\n\002MR\020\214\001\022\007\n\002MU\020\215\001\022\007\n\002YT\020\216\001\022\007\n\002MX\020\217\001\022\007"
  "\n\002FM\020\220\001\022\007\n\002MD\020\221\001\022\007\n\002MC\020\222\001\022\007\n\002MN\020\223\001\022\007\n\002ME"
  "\020\224\001\022\007\n\002MS\020\225\001\022\007\n\002MA\020\226\001\022\007\n\002MZ\020\227\001\022\007\n\002MM\020\230\001\022"
  "\007\n\002NA\020\231\001\022\007\n\002NR\020\232\001\022\007\n\002NP\020\233\001\022\007\n\002NL\020\234\001\022\007\n\002N"
  "C\020\235\001\022\007\n\002NZ\020\236\001\022\007\n\002NI\020\237\001\022\007\n\002NE\020\240\001\022\007\n\002NG\020\241\001"
  "\022\007\n\002NU\020\242\001\022\007\n\002NF\020\243\001\022\007\n\002MP\020\244\001\022\007\n\002NO\020\245\001\022\007\n\002"
  "OM\020\246\001\022\007\n\002PK\020\247\001\022\007\n\002PW\020\250\001\022\007\n\002PS\020\251\001\022\007\n\002PA\020\252"
  "\001\022\007\n\002PG\020\253\001\022\007\n\002PY\020\254\001\022\007\n\002PE\020\255\001\022\007\n\002PH\020\256\001\022\007\n"
  "\002PN\020\257\001\022\007\n\002PL\020\260\001\022\007\n\002PT\020\261\001\022\007\n\002PR\020\262\001\022\007\n\002QA\020"
  "\263\001\022\007\n\002RE\020\264\001\022\007\n\002RO\020\265\001\022\007\n\002RU\020\266\001\022\007\n\002RW\020\267\001\022\007"
  "\n\002BL\020\270\001\022\007\n\002SH\020\271\001\022\007\n\002KN\020\272\001\022\007\n\002LC\020\273\001\022\007\n\002MF"
  "\020\274\001\022\007\n\002PM\020\275\001\022\007\n\002VC\020\276\001\022\007\n\002WS\020\277\001\022\007\n\002SM\020\300\001\022"
  "\007\n\002ST\020\301\001\022\007\n\002SA\020\302\001\022\007\n\002SN\020\303\001\022\007\n\002RS\020\304\001\022\007\n\002S"
  "C\020\305\001\022\007\n\002SL\020\306\001\022\007\n\002SG\020\307\001\022\007\n\002SX\020\310\001\022\007\n\002SK\020\311\001"
  "\022\007\n\002SI\020\312\001\022\007\n\002SB\020\313\001\022\007\n\002SO\020\314\001\022\007\n\002ZA\020\315\001\022\007\n\002"
  "GS\020\316\001\022\007\n\002SS\020\317\001\022\007\n\002ES\020\320\001\022\007\n\002LK\020\321\001\022\007\n\002SD\020\322"
  "\001\022\007\n\002SR\020\323\001\022\007\n\002SJ\020\324\001\022\007\n\002SZ\020\325\001\022\007\n\002SE\020\326\001\022\007\n"
  "\002CH\020\327\001\022\007\n\002SY\020\330\001\022\007\n\002TW\020\331\001\022\007\n\002TJ\020\332\001\022\007\n\002TZ\020"
  "\333\001\022\007\n\002TH\020\334\001\022\007\n\002TL\020\335\001\022\007\n\002TG\020\336\001\022\007\n\002TK\020\337\001\022\007"
  "\n\002TO\020\340\001\022\007\n\002TT\020\341\001\022\007\n\002TN\020\342\001\022\007\n\002TR\020\343\001\022\007\n\002TM"
  "\020\344\001\022\007\n\002TC\020\345\001\022\007\n\002TV\020\346\001\022\007\n\002UG\020\347\001\022\007\n\002UA\020\350\001\022"
  "\007\n\002AE\020\351\001\022\007\n\002GB\020\352\001\022\007\n\002US\020\353\001\022\007\n\002UM\020\354\001\022\007\n\002U"
  "Y\020\355\001\022\007\n\002UZ\020\356\001\022\007\n\002VU\020\357\001\022\007\n\002VE\020\360\001\022\007\n\002VN\020\361\001"
  "\022\007\n\002VG\020\362\001\022\007\n\002VI\020\363\001\022\007\n\002WF\020\364\001\022\007\n\002EH\020\365\001\022\007\n\002"
  "YE\020\366\001\022\007\n\002ZM\020\367\001\022\007\n\002ZW\020\370\001B)Z\'workstream_pr"
  "otocol/common/country_codeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Common_2fCountryCode_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Common_2fCountryCode_2eproto_sccs[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Common_2fCountryCode_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Common_2fCountryCode_2eproto = {
  false, false, descriptor_table_protodef_Common_2fCountryCode_2eproto, "Common/CountryCode.proto", 2234,
  &descriptor_table_Common_2fCountryCode_2eproto_once, descriptor_table_Common_2fCountryCode_2eproto_sccs, descriptor_table_Common_2fCountryCode_2eproto_deps, 0, 0,
  schemas, file_default_instances, TableStruct_Common_2fCountryCode_2eproto::offsets,
  file_level_metadata_Common_2fCountryCode_2eproto, 0, file_level_enum_descriptors_Common_2fCountryCode_2eproto, file_level_service_descriptors_Common_2fCountryCode_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Common_2fCountryCode_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Common_2fCountryCode_2eproto)), true);
namespace Workstream {
namespace Protocol {
namespace Common {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CountryCode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2fCountryCode_2eproto);
  return file_level_enum_descriptors_Common_2fCountryCode_2eproto[0];
}
bool CountryCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 128:
    case 129:
    case 130:
    case 131:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 138:
    case 139:
    case 140:
    case 141:
    case 142:
    case 143:
    case 144:
    case 145:
    case 146:
    case 147:
    case 148:
    case 149:
    case 150:
    case 151:
    case 152:
    case 153:
    case 154:
    case 155:
    case 156:
    case 157:
    case 158:
    case 159:
    case 160:
    case 161:
    case 162:
    case 163:
    case 164:
    case 165:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
    case 198:
    case 199:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Common
}  // namespace Protocol
}  // namespace Workstream
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
