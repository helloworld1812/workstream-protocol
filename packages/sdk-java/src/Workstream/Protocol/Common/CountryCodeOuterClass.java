// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common/CountryCode.proto

package Workstream.Protocol.Common;

public final class CountryCodeOuterClass {
  private CountryCodeOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * <pre>
   * ISO 3166-2
   * </pre>
   *
   * Protobuf enum {@code Workstream.Protocol.Common.CountryCode}
   */
  public enum CountryCode
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <pre>
     * Afghanistan
     * </pre>
     *
     * <code>AF = 0;</code>
     */
    AF(0),
    /**
     * <pre>
     * Ã…land Islands
     * </pre>
     *
     * <code>AX = 1;</code>
     */
    AX(1),
    /**
     * <pre>
     * Albania
     * </pre>
     *
     * <code>AL = 2;</code>
     */
    AL(2),
    /**
     * <pre>
     * Algeria
     * </pre>
     *
     * <code>DZ = 3;</code>
     */
    DZ(3),
    /**
     * <pre>
     * American Samoa
     * </pre>
     *
     * <code>AS = 4;</code>
     */
    AS(4),
    /**
     * <pre>
     * Andorra
     * </pre>
     *
     * <code>AD = 5;</code>
     */
    AD(5),
    /**
     * <pre>
     * Angola
     * </pre>
     *
     * <code>AO = 6;</code>
     */
    AO(6),
    /**
     * <pre>
     * Anguilla
     * </pre>
     *
     * <code>AI = 7;</code>
     */
    AI(7),
    /**
     * <pre>
     * Antarctica
     * </pre>
     *
     * <code>AQ = 8;</code>
     */
    AQ(8),
    /**
     * <pre>
     * Antigua and Barbuda
     * </pre>
     *
     * <code>AG = 9;</code>
     */
    AG(9),
    /**
     * <pre>
     * Argentina
     * </pre>
     *
     * <code>AR = 10;</code>
     */
    AR(10),
    /**
     * <pre>
     * Armenia
     * </pre>
     *
     * <code>AM = 11;</code>
     */
    AM(11),
    /**
     * <pre>
     * Aruba
     * </pre>
     *
     * <code>AW = 12;</code>
     */
    AW(12),
    /**
     * <pre>
     * Australia
     * </pre>
     *
     * <code>AU = 13;</code>
     */
    AU(13),
    /**
     * <pre>
     * Austria
     * </pre>
     *
     * <code>AT = 14;</code>
     */
    AT(14),
    /**
     * <pre>
     * Azerbaijan
     * </pre>
     *
     * <code>AZ = 15;</code>
     */
    AZ(15),
    /**
     * <pre>
     * Bahamas
     * </pre>
     *
     * <code>BS = 16;</code>
     */
    BS(16),
    /**
     * <pre>
     * Bahrain
     * </pre>
     *
     * <code>BH = 17;</code>
     */
    BH(17),
    /**
     * <pre>
     * Bangladesh
     * </pre>
     *
     * <code>BD = 18;</code>
     */
    BD(18),
    /**
     * <pre>
     * Barbados
     * </pre>
     *
     * <code>BB = 19;</code>
     */
    BB(19),
    /**
     * <pre>
     * Belarus
     * </pre>
     *
     * <code>BY = 20;</code>
     */
    BY(20),
    /**
     * <pre>
     * Belgium
     * </pre>
     *
     * <code>BE = 21;</code>
     */
    BE(21),
    /**
     * <pre>
     * Belize
     * </pre>
     *
     * <code>BZ = 22;</code>
     */
    BZ(22),
    /**
     * <pre>
     * Benin
     * </pre>
     *
     * <code>BJ = 23;</code>
     */
    BJ(23),
    /**
     * <pre>
     * Bermuda
     * </pre>
     *
     * <code>BM = 24;</code>
     */
    BM(24),
    /**
     * <pre>
     * Bhutan
     * </pre>
     *
     * <code>BT = 25;</code>
     */
    BT(25),
    /**
     * <pre>
     * "Bolivia, Plurinational State of"
     * </pre>
     *
     * <code>BO = 26;</code>
     */
    BO(26),
    /**
     * <pre>
     * "Bonaire, Sint Eustatius and Saba"
     * </pre>
     *
     * <code>BQ = 27;</code>
     */
    BQ(27),
    /**
     * <pre>
     * Bosnia and Herzegovina
     * </pre>
     *
     * <code>BA = 28;</code>
     */
    BA(28),
    /**
     * <pre>
     * Botswana
     * </pre>
     *
     * <code>BW = 29;</code>
     */
    BW(29),
    /**
     * <pre>
     * Bouvet Island
     * </pre>
     *
     * <code>BV = 30;</code>
     */
    BV(30),
    /**
     * <pre>
     * Brazil
     * </pre>
     *
     * <code>BR = 31;</code>
     */
    BR(31),
    /**
     * <pre>
     * British Indian Ocean Territory
     * </pre>
     *
     * <code>IO = 32;</code>
     */
    IO(32),
    /**
     * <pre>
     * Brunei Darussalam
     * </pre>
     *
     * <code>BN = 33;</code>
     */
    BN(33),
    /**
     * <pre>
     * Bulgaria
     * </pre>
     *
     * <code>BG = 34;</code>
     */
    BG(34),
    /**
     * <pre>
     * Burkina Faso
     * </pre>
     *
     * <code>BF = 35;</code>
     */
    BF(35),
    /**
     * <pre>
     * Burundi
     * </pre>
     *
     * <code>BI = 36;</code>
     */
    BI(36),
    /**
     * <pre>
     * Cambodia
     * </pre>
     *
     * <code>KH = 37;</code>
     */
    KH(37),
    /**
     * <pre>
     * Cameroon
     * </pre>
     *
     * <code>CM = 38;</code>
     */
    CM(38),
    /**
     * <pre>
     * Canada
     * </pre>
     *
     * <code>CA = 39;</code>
     */
    CA(39),
    /**
     * <pre>
     * Cape Verde
     * </pre>
     *
     * <code>CV = 40;</code>
     */
    CV(40),
    /**
     * <pre>
     * Cayman Islands
     * </pre>
     *
     * <code>KY = 41;</code>
     */
    KY(41),
    /**
     * <pre>
     * Central African Republic
     * </pre>
     *
     * <code>CF = 42;</code>
     */
    CF(42),
    /**
     * <pre>
     * Chad
     * </pre>
     *
     * <code>TD = 43;</code>
     */
    TD(43),
    /**
     * <pre>
     * Chile
     * </pre>
     *
     * <code>CL = 44;</code>
     */
    CL(44),
    /**
     * <pre>
     * China
     * </pre>
     *
     * <code>CN = 45;</code>
     */
    CN(45),
    /**
     * <pre>
     * Christmas Island
     * </pre>
     *
     * <code>CX = 46;</code>
     */
    CX(46),
    /**
     * <pre>
     * Cocos (Keeling) Islands
     * </pre>
     *
     * <code>CC = 47;</code>
     */
    CC(47),
    /**
     * <pre>
     * Colombia
     * </pre>
     *
     * <code>CO = 48;</code>
     */
    CO(48),
    /**
     * <pre>
     * Comoros
     * </pre>
     *
     * <code>KM = 49;</code>
     */
    KM(49),
    /**
     * <pre>
     * Congo
     * </pre>
     *
     * <code>CG = 50;</code>
     */
    CG(50),
    /**
     * <pre>
     * "Congo, the Democratic Republic of the"
     * </pre>
     *
     * <code>CD = 51;</code>
     */
    CD(51),
    /**
     * <pre>
     * Cook Islands
     * </pre>
     *
     * <code>CK = 52;</code>
     */
    CK(52),
    /**
     * <pre>
     * Costa Rica
     * </pre>
     *
     * <code>CR = 53;</code>
     */
    CR(53),
    /**
     * <pre>
     * CÃ´te d'Ivoire
     * </pre>
     *
     * <code>CI = 54;</code>
     */
    CI(54),
    /**
     * <pre>
     * Croatia
     * </pre>
     *
     * <code>HR = 55;</code>
     */
    HR(55),
    /**
     * <pre>
     * Cuba
     * </pre>
     *
     * <code>CU = 56;</code>
     */
    CU(56),
    /**
     * <pre>
     * CuraÃ§ao
     * </pre>
     *
     * <code>CW = 57;</code>
     */
    CW(57),
    /**
     * <pre>
     * Cyprus
     * </pre>
     *
     * <code>CY = 58;</code>
     */
    CY(58),
    /**
     * <pre>
     * Czech Republic
     * </pre>
     *
     * <code>CZ = 59;</code>
     */
    CZ(59),
    /**
     * <pre>
     * Denmark
     * </pre>
     *
     * <code>DK = 60;</code>
     */
    DK(60),
    /**
     * <pre>
     * Djibouti
     * </pre>
     *
     * <code>DJ = 61;</code>
     */
    DJ(61),
    /**
     * <pre>
     * Dominica
     * </pre>
     *
     * <code>DM = 62;</code>
     */
    DM(62),
    /**
     * <pre>
     * Dominican Republic
     * </pre>
     *
     * <code>DO = 63;</code>
     */
    DO(63),
    /**
     * <pre>
     * Ecuador
     * </pre>
     *
     * <code>EC = 64;</code>
     */
    EC(64),
    /**
     * <pre>
     * Egypt
     * </pre>
     *
     * <code>EG = 65;</code>
     */
    EG(65),
    /**
     * <pre>
     * El Salvador
     * </pre>
     *
     * <code>SV = 66;</code>
     */
    SV(66),
    /**
     * <pre>
     * Equatorial Guinea
     * </pre>
     *
     * <code>GQ = 67;</code>
     */
    GQ(67),
    /**
     * <pre>
     * Eritrea
     * </pre>
     *
     * <code>ER = 68;</code>
     */
    ER(68),
    /**
     * <pre>
     * Estonia
     * </pre>
     *
     * <code>EE = 69;</code>
     */
    EE(69),
    /**
     * <pre>
     * Ethiopia
     * </pre>
     *
     * <code>ET = 70;</code>
     */
    ET(70),
    /**
     * <pre>
     * Falkland Islands (Malvinas)
     * </pre>
     *
     * <code>FK = 71;</code>
     */
    FK(71),
    /**
     * <pre>
     * Faroe Islands
     * </pre>
     *
     * <code>FO = 72;</code>
     */
    FO(72),
    /**
     * <pre>
     * Fiji
     * </pre>
     *
     * <code>FJ = 73;</code>
     */
    FJ(73),
    /**
     * <pre>
     * Finland
     * </pre>
     *
     * <code>FI = 74;</code>
     */
    FI(74),
    /**
     * <pre>
     * France
     * </pre>
     *
     * <code>FR = 75;</code>
     */
    FR(75),
    /**
     * <pre>
     * French Guiana
     * </pre>
     *
     * <code>GF = 76;</code>
     */
    GF(76),
    /**
     * <pre>
     * French Polynesia
     * </pre>
     *
     * <code>PF = 77;</code>
     */
    PF(77),
    /**
     * <pre>
     * French Southern Territories
     * </pre>
     *
     * <code>TF = 78;</code>
     */
    TF(78),
    /**
     * <pre>
     * Gabon
     * </pre>
     *
     * <code>GA = 79;</code>
     */
    GA(79),
    /**
     * <pre>
     * Gambia
     * </pre>
     *
     * <code>GM = 80;</code>
     */
    GM(80),
    /**
     * <pre>
     * Georgia
     * </pre>
     *
     * <code>GE = 81;</code>
     */
    GE(81),
    /**
     * <pre>
     * Germany
     * </pre>
     *
     * <code>DE = 82;</code>
     */
    DE(82),
    /**
     * <pre>
     * Ghana
     * </pre>
     *
     * <code>GH = 83;</code>
     */
    GH(83),
    /**
     * <pre>
     * Gibraltar
     * </pre>
     *
     * <code>GI = 84;</code>
     */
    GI(84),
    /**
     * <pre>
     * Greece
     * </pre>
     *
     * <code>GR = 85;</code>
     */
    GR(85),
    /**
     * <pre>
     * Greenland
     * </pre>
     *
     * <code>GL = 86;</code>
     */
    GL(86),
    /**
     * <pre>
     * Grenada
     * </pre>
     *
     * <code>GD = 87;</code>
     */
    GD(87),
    /**
     * <pre>
     * Guadeloupe
     * </pre>
     *
     * <code>GP = 88;</code>
     */
    GP(88),
    /**
     * <pre>
     * Guam
     * </pre>
     *
     * <code>GU = 89;</code>
     */
    GU(89),
    /**
     * <pre>
     * Guatemala
     * </pre>
     *
     * <code>GT = 90;</code>
     */
    GT(90),
    /**
     * <pre>
     * Guernsey
     * </pre>
     *
     * <code>GG = 91;</code>
     */
    GG(91),
    /**
     * <pre>
     * Guinea
     * </pre>
     *
     * <code>GN = 92;</code>
     */
    GN(92),
    /**
     * <pre>
     * Guinea-Bissau
     * </pre>
     *
     * <code>GW = 93;</code>
     */
    GW(93),
    /**
     * <pre>
     * Guyana
     * </pre>
     *
     * <code>GY = 94;</code>
     */
    GY(94),
    /**
     * <pre>
     * Haiti
     * </pre>
     *
     * <code>HT = 95;</code>
     */
    HT(95),
    /**
     * <pre>
     * Heard Island and McDonald Islands
     * </pre>
     *
     * <code>HM = 96;</code>
     */
    HM(96),
    /**
     * <pre>
     * Holy See (Vatican City State)
     * </pre>
     *
     * <code>VA = 97;</code>
     */
    VA(97),
    /**
     * <pre>
     * Honduras
     * </pre>
     *
     * <code>HN = 98;</code>
     */
    HN(98),
    /**
     * <pre>
     * Hong Kong
     * </pre>
     *
     * <code>HK = 99;</code>
     */
    HK(99),
    /**
     * <pre>
     * Hungary
     * </pre>
     *
     * <code>HU = 100;</code>
     */
    HU(100),
    /**
     * <pre>
     * Iceland
     * </pre>
     *
     * <code>IS = 101;</code>
     */
    IS(101),
    /**
     * <pre>
     * India
     * </pre>
     *
     * <code>IN = 102;</code>
     */
    IN(102),
    /**
     * <pre>
     * Indonesia
     * </pre>
     *
     * <code>ID = 103;</code>
     */
    ID(103),
    /**
     * <pre>
     * "Iran, Islamic Republic of"
     * </pre>
     *
     * <code>IR = 104;</code>
     */
    IR(104),
    /**
     * <pre>
     * Iraq
     * </pre>
     *
     * <code>IQ = 105;</code>
     */
    IQ(105),
    /**
     * <pre>
     * Ireland
     * </pre>
     *
     * <code>IE = 106;</code>
     */
    IE(106),
    /**
     * <pre>
     * Isle of Man
     * </pre>
     *
     * <code>IM = 107;</code>
     */
    IM(107),
    /**
     * <pre>
     * Israel
     * </pre>
     *
     * <code>IL = 108;</code>
     */
    IL(108),
    /**
     * <pre>
     * Italy
     * </pre>
     *
     * <code>IT = 109;</code>
     */
    IT(109),
    /**
     * <pre>
     * Jamaica
     * </pre>
     *
     * <code>JM = 110;</code>
     */
    JM(110),
    /**
     * <pre>
     * Japan
     * </pre>
     *
     * <code>JP = 111;</code>
     */
    JP(111),
    /**
     * <pre>
     * Jersey
     * </pre>
     *
     * <code>JE = 112;</code>
     */
    JE(112),
    /**
     * <pre>
     * Jordan
     * </pre>
     *
     * <code>JO = 113;</code>
     */
    JO(113),
    /**
     * <pre>
     * Kazakhstan
     * </pre>
     *
     * <code>KZ = 114;</code>
     */
    KZ(114),
    /**
     * <pre>
     * Kenya
     * </pre>
     *
     * <code>KE = 115;</code>
     */
    KE(115),
    /**
     * <pre>
     * Kiribati
     * </pre>
     *
     * <code>KI = 116;</code>
     */
    KI(116),
    /**
     * <pre>
     * "Korea, Democratic People's Republic of"
     * </pre>
     *
     * <code>KP = 117;</code>
     */
    KP(117),
    /**
     * <pre>
     * "Korea, Republic of"
     * </pre>
     *
     * <code>KR = 118;</code>
     */
    KR(118),
    /**
     * <pre>
     * Kuwait
     * </pre>
     *
     * <code>KW = 119;</code>
     */
    KW(119),
    /**
     * <pre>
     * Kyrgyzstan
     * </pre>
     *
     * <code>KG = 120;</code>
     */
    KG(120),
    /**
     * <pre>
     * Lao People's Democratic Republic
     * </pre>
     *
     * <code>LA = 121;</code>
     */
    LA(121),
    /**
     * <pre>
     * Latvia
     * </pre>
     *
     * <code>LV = 122;</code>
     */
    LV(122),
    /**
     * <pre>
     * Lebanon
     * </pre>
     *
     * <code>LB = 123;</code>
     */
    LB(123),
    /**
     * <pre>
     * Lesotho
     * </pre>
     *
     * <code>LS = 124;</code>
     */
    LS(124),
    /**
     * <pre>
     * Liberia
     * </pre>
     *
     * <code>LR = 125;</code>
     */
    LR(125),
    /**
     * <pre>
     * Libya
     * </pre>
     *
     * <code>LY = 126;</code>
     */
    LY(126),
    /**
     * <pre>
     * Liechtenstein
     * </pre>
     *
     * <code>LI = 127;</code>
     */
    LI(127),
    /**
     * <pre>
     * Lithuania
     * </pre>
     *
     * <code>LT = 128;</code>
     */
    LT(128),
    /**
     * <pre>
     * Luxembourg
     * </pre>
     *
     * <code>LU = 129;</code>
     */
    LU(129),
    /**
     * <pre>
     * Macao
     * </pre>
     *
     * <code>MO = 130;</code>
     */
    MO(130),
    /**
     * <pre>
     * "Macedonia, the Former Yugoslav Republic of"
     * </pre>
     *
     * <code>MK = 131;</code>
     */
    MK(131),
    /**
     * <pre>
     * Madagascar
     * </pre>
     *
     * <code>MG = 132;</code>
     */
    MG(132),
    /**
     * <pre>
     * Malawi
     * </pre>
     *
     * <code>MW = 133;</code>
     */
    MW(133),
    /**
     * <pre>
     * Malaysia
     * </pre>
     *
     * <code>MY = 134;</code>
     */
    MY(134),
    /**
     * <pre>
     * Maldives
     * </pre>
     *
     * <code>MV = 135;</code>
     */
    MV(135),
    /**
     * <pre>
     * Mali
     * </pre>
     *
     * <code>ML = 136;</code>
     */
    ML(136),
    /**
     * <pre>
     * Malta
     * </pre>
     *
     * <code>MT = 137;</code>
     */
    MT(137),
    /**
     * <pre>
     * Marshall Islands
     * </pre>
     *
     * <code>MH = 138;</code>
     */
    MH(138),
    /**
     * <pre>
     * Martinique
     * </pre>
     *
     * <code>MQ = 139;</code>
     */
    MQ(139),
    /**
     * <pre>
     * Mauritania
     * </pre>
     *
     * <code>MR = 140;</code>
     */
    MR(140),
    /**
     * <pre>
     * Mauritius
     * </pre>
     *
     * <code>MU = 141;</code>
     */
    MU(141),
    /**
     * <pre>
     * Mayotte
     * </pre>
     *
     * <code>YT = 142;</code>
     */
    YT(142),
    /**
     * <pre>
     * Mexico
     * </pre>
     *
     * <code>MX = 143;</code>
     */
    MX(143),
    /**
     * <pre>
     * "Micronesia, Federated States of"
     * </pre>
     *
     * <code>FM = 144;</code>
     */
    FM(144),
    /**
     * <pre>
     * "Moldova, Republic of"
     * </pre>
     *
     * <code>MD = 145;</code>
     */
    MD(145),
    /**
     * <pre>
     * Monaco
     * </pre>
     *
     * <code>MC = 146;</code>
     */
    MC(146),
    /**
     * <pre>
     * Mongolia
     * </pre>
     *
     * <code>MN = 147;</code>
     */
    MN(147),
    /**
     * <pre>
     * Montenegro
     * </pre>
     *
     * <code>ME = 148;</code>
     */
    ME(148),
    /**
     * <pre>
     * Montserrat
     * </pre>
     *
     * <code>MS = 149;</code>
     */
    MS(149),
    /**
     * <pre>
     * Morocco
     * </pre>
     *
     * <code>MA = 150;</code>
     */
    MA(150),
    /**
     * <pre>
     * Mozambique
     * </pre>
     *
     * <code>MZ = 151;</code>
     */
    MZ(151),
    /**
     * <pre>
     * Myanmar
     * </pre>
     *
     * <code>MM = 152;</code>
     */
    MM(152),
    /**
     * <pre>
     * Namibia
     * </pre>
     *
     * <code>NA = 153;</code>
     */
    NA(153),
    /**
     * <pre>
     * Nauru
     * </pre>
     *
     * <code>NR = 154;</code>
     */
    NR(154),
    /**
     * <pre>
     * Nepal
     * </pre>
     *
     * <code>NP = 155;</code>
     */
    NP(155),
    /**
     * <pre>
     * Netherlands
     * </pre>
     *
     * <code>NL = 156;</code>
     */
    NL(156),
    /**
     * <pre>
     * New Caledonia
     * </pre>
     *
     * <code>NC = 157;</code>
     */
    NC(157),
    /**
     * <pre>
     * New Zealand
     * </pre>
     *
     * <code>NZ = 158;</code>
     */
    NZ(158),
    /**
     * <pre>
     * Nicaragua
     * </pre>
     *
     * <code>NI = 159;</code>
     */
    NI(159),
    /**
     * <pre>
     * Niger
     * </pre>
     *
     * <code>NE = 160;</code>
     */
    NE(160),
    /**
     * <pre>
     * Nigeria
     * </pre>
     *
     * <code>NG = 161;</code>
     */
    NG(161),
    /**
     * <pre>
     * Niue
     * </pre>
     *
     * <code>NU = 162;</code>
     */
    NU(162),
    /**
     * <pre>
     * Norfolk Island
     * </pre>
     *
     * <code>NF = 163;</code>
     */
    NF(163),
    /**
     * <pre>
     * Northern Mariana Islands
     * </pre>
     *
     * <code>MP = 164;</code>
     */
    MP(164),
    /**
     * <pre>
     * Norway
     * </pre>
     *
     * <code>NO = 165;</code>
     */
    NO(165),
    /**
     * <pre>
     * Oman
     * </pre>
     *
     * <code>OM = 166;</code>
     */
    OM(166),
    /**
     * <pre>
     * Pakistan
     * </pre>
     *
     * <code>PK = 167;</code>
     */
    PK(167),
    /**
     * <pre>
     * Palau
     * </pre>
     *
     * <code>PW = 168;</code>
     */
    PW(168),
    /**
     * <pre>
     * "Palestine, State of"
     * </pre>
     *
     * <code>PS = 169;</code>
     */
    PS(169),
    /**
     * <pre>
     * Panama
     * </pre>
     *
     * <code>PA = 170;</code>
     */
    PA(170),
    /**
     * <pre>
     * Papua New Guinea
     * </pre>
     *
     * <code>PG = 171;</code>
     */
    PG(171),
    /**
     * <pre>
     * Paraguay
     * </pre>
     *
     * <code>PY = 172;</code>
     */
    PY(172),
    /**
     * <pre>
     * Peru
     * </pre>
     *
     * <code>PE = 173;</code>
     */
    PE(173),
    /**
     * <pre>
     * Philippines
     * </pre>
     *
     * <code>PH = 174;</code>
     */
    PH(174),
    /**
     * <pre>
     * Pitcairn
     * </pre>
     *
     * <code>PN = 175;</code>
     */
    PN(175),
    /**
     * <pre>
     * Poland
     * </pre>
     *
     * <code>PL = 176;</code>
     */
    PL(176),
    /**
     * <pre>
     * Portugal
     * </pre>
     *
     * <code>PT = 177;</code>
     */
    PT(177),
    /**
     * <pre>
     * Puerto Rico
     * </pre>
     *
     * <code>PR = 178;</code>
     */
    PR(178),
    /**
     * <pre>
     * Qatar
     * </pre>
     *
     * <code>QA = 179;</code>
     */
    QA(179),
    /**
     * <pre>
     * RÃ©union
     * </pre>
     *
     * <code>RE = 180;</code>
     */
    RE(180),
    /**
     * <pre>
     * Romania
     * </pre>
     *
     * <code>RO = 181;</code>
     */
    RO(181),
    /**
     * <pre>
     * Russian Federation
     * </pre>
     *
     * <code>RU = 182;</code>
     */
    RU(182),
    /**
     * <pre>
     * Rwanda
     * </pre>
     *
     * <code>RW = 183;</code>
     */
    RW(183),
    /**
     * <pre>
     * Saint BarthÃ©lemy
     * </pre>
     *
     * <code>BL = 184;</code>
     */
    BL(184),
    /**
     * <pre>
     * "Saint Helena, Ascension and Tristan da Cunha"
     * </pre>
     *
     * <code>SH = 185;</code>
     */
    SH(185),
    /**
     * <pre>
     * Saint Kitts and Nevis
     * </pre>
     *
     * <code>KN = 186;</code>
     */
    KN(186),
    /**
     * <pre>
     * Saint Lucia
     * </pre>
     *
     * <code>LC = 187;</code>
     */
    LC(187),
    /**
     * <pre>
     * Saint Martin (French part)
     * </pre>
     *
     * <code>MF = 188;</code>
     */
    MF(188),
    /**
     * <pre>
     * Saint Pierre and Miquelon
     * </pre>
     *
     * <code>PM = 189;</code>
     */
    PM(189),
    /**
     * <pre>
     * Saint Vincent and the Grenadines
     * </pre>
     *
     * <code>VC = 190;</code>
     */
    VC(190),
    /**
     * <pre>
     * Samoa
     * </pre>
     *
     * <code>WS = 191;</code>
     */
    WS(191),
    /**
     * <pre>
     * San Marino
     * </pre>
     *
     * <code>SM = 192;</code>
     */
    SM(192),
    /**
     * <pre>
     * Sao Tome and Principe
     * </pre>
     *
     * <code>ST = 193;</code>
     */
    ST(193),
    /**
     * <pre>
     * Saudi Arabia
     * </pre>
     *
     * <code>SA = 194;</code>
     */
    SA(194),
    /**
     * <pre>
     * Senegal
     * </pre>
     *
     * <code>SN = 195;</code>
     */
    SN(195),
    /**
     * <pre>
     * Serbia
     * </pre>
     *
     * <code>RS = 196;</code>
     */
    RS(196),
    /**
     * <pre>
     * Seychelles
     * </pre>
     *
     * <code>SC = 197;</code>
     */
    SC(197),
    /**
     * <pre>
     * Sierra Leone
     * </pre>
     *
     * <code>SL = 198;</code>
     */
    SL(198),
    /**
     * <pre>
     * Singapore
     * </pre>
     *
     * <code>SG = 199;</code>
     */
    SG(199),
    /**
     * <pre>
     * Sint Maarten (Dutch part)
     * </pre>
     *
     * <code>SX = 200;</code>
     */
    SX(200),
    /**
     * <pre>
     * Slovakia
     * </pre>
     *
     * <code>SK = 201;</code>
     */
    SK(201),
    /**
     * <pre>
     * Slovenia
     * </pre>
     *
     * <code>SI = 202;</code>
     */
    SI(202),
    /**
     * <pre>
     * Solomon Islands
     * </pre>
     *
     * <code>SB = 203;</code>
     */
    SB(203),
    /**
     * <pre>
     * Somalia
     * </pre>
     *
     * <code>SO = 204;</code>
     */
    SO(204),
    /**
     * <pre>
     * South Africa
     * </pre>
     *
     * <code>ZA = 205;</code>
     */
    ZA(205),
    /**
     * <pre>
     * South Georgia and the South Sandwich Islands
     * </pre>
     *
     * <code>GS = 206;</code>
     */
    GS(206),
    /**
     * <pre>
     * South Sudan
     * </pre>
     *
     * <code>SS = 207;</code>
     */
    SS(207),
    /**
     * <pre>
     * Spain
     * </pre>
     *
     * <code>ES = 208;</code>
     */
    ES(208),
    /**
     * <pre>
     * Sri Lanka
     * </pre>
     *
     * <code>LK = 209;</code>
     */
    LK(209),
    /**
     * <pre>
     * Sudan
     * </pre>
     *
     * <code>SD = 210;</code>
     */
    SD(210),
    /**
     * <pre>
     * Suriname
     * </pre>
     *
     * <code>SR = 211;</code>
     */
    SR(211),
    /**
     * <pre>
     * Svalbard and Jan Mayen
     * </pre>
     *
     * <code>SJ = 212;</code>
     */
    SJ(212),
    /**
     * <pre>
     * Swaziland
     * </pre>
     *
     * <code>SZ = 213;</code>
     */
    SZ(213),
    /**
     * <pre>
     * Sweden
     * </pre>
     *
     * <code>SE = 214;</code>
     */
    SE(214),
    /**
     * <pre>
     * Switzerland
     * </pre>
     *
     * <code>CH = 215;</code>
     */
    CH(215),
    /**
     * <pre>
     * Syrian Arab Republic
     * </pre>
     *
     * <code>SY = 216;</code>
     */
    SY(216),
    /**
     * <pre>
     * "Taiwan, Province of China"
     * </pre>
     *
     * <code>TW = 217;</code>
     */
    TW(217),
    /**
     * <pre>
     * Tajikistan
     * </pre>
     *
     * <code>TJ = 218;</code>
     */
    TJ(218),
    /**
     * <pre>
     * "Tanzania, United Republic of"
     * </pre>
     *
     * <code>TZ = 219;</code>
     */
    TZ(219),
    /**
     * <pre>
     * Thailand
     * </pre>
     *
     * <code>TH = 220;</code>
     */
    TH(220),
    /**
     * <pre>
     * Timor-Leste
     * </pre>
     *
     * <code>TL = 221;</code>
     */
    TL(221),
    /**
     * <pre>
     * Togo
     * </pre>
     *
     * <code>TG = 222;</code>
     */
    TG(222),
    /**
     * <pre>
     * Tokelau
     * </pre>
     *
     * <code>TK = 223;</code>
     */
    TK(223),
    /**
     * <pre>
     * Tonga
     * </pre>
     *
     * <code>TO = 224;</code>
     */
    TO(224),
    /**
     * <pre>
     * Trinidad and Tobago
     * </pre>
     *
     * <code>TT = 225;</code>
     */
    TT(225),
    /**
     * <pre>
     * Tunisia
     * </pre>
     *
     * <code>TN = 226;</code>
     */
    TN(226),
    /**
     * <pre>
     * Turkey
     * </pre>
     *
     * <code>TR = 227;</code>
     */
    TR(227),
    /**
     * <pre>
     * Turkmenistan
     * </pre>
     *
     * <code>TM = 228;</code>
     */
    TM(228),
    /**
     * <pre>
     * Turks and Caicos Islands
     * </pre>
     *
     * <code>TC = 229;</code>
     */
    TC(229),
    /**
     * <pre>
     * Tuvalu
     * </pre>
     *
     * <code>TV = 230;</code>
     */
    TV(230),
    /**
     * <pre>
     * Uganda
     * </pre>
     *
     * <code>UG = 231;</code>
     */
    UG(231),
    /**
     * <pre>
     * Ukraine
     * </pre>
     *
     * <code>UA = 232;</code>
     */
    UA(232),
    /**
     * <pre>
     * United Arab Emirates
     * </pre>
     *
     * <code>AE = 233;</code>
     */
    AE(233),
    /**
     * <pre>
     * United Kingdom
     * </pre>
     *
     * <code>GB = 234;</code>
     */
    GB(234),
    /**
     * <pre>
     * United States
     * </pre>
     *
     * <code>US = 235;</code>
     */
    US(235),
    /**
     * <pre>
     * United States Minor Outlying Islands
     * </pre>
     *
     * <code>UM = 236;</code>
     */
    UM(236),
    /**
     * <pre>
     * Uruguay
     * </pre>
     *
     * <code>UY = 237;</code>
     */
    UY(237),
    /**
     * <pre>
     * Uzbekistan
     * </pre>
     *
     * <code>UZ = 238;</code>
     */
    UZ(238),
    /**
     * <pre>
     * Vanuatu
     * </pre>
     *
     * <code>VU = 239;</code>
     */
    VU(239),
    /**
     * <pre>
     * "Venezuela, Bolivarian Republic of"
     * </pre>
     *
     * <code>VE = 240;</code>
     */
    VE(240),
    /**
     * <pre>
     * Viet Nam
     * </pre>
     *
     * <code>VN = 241;</code>
     */
    VN(241),
    /**
     * <pre>
     * "Virgin Islands, British"
     * </pre>
     *
     * <code>VG = 242;</code>
     */
    VG(242),
    /**
     * <pre>
     * "Virgin Islands, U.S."
     * </pre>
     *
     * <code>VI = 243;</code>
     */
    VI(243),
    /**
     * <pre>
     * Wallis and Futuna
     * </pre>
     *
     * <code>WF = 244;</code>
     */
    WF(244),
    /**
     * <pre>
     * Western Sahara
     * </pre>
     *
     * <code>EH = 245;</code>
     */
    EH(245),
    /**
     * <pre>
     * Yemen
     * </pre>
     *
     * <code>YE = 246;</code>
     */
    YE(246),
    /**
     * <pre>
     * Zambia
     * </pre>
     *
     * <code>ZM = 247;</code>
     */
    ZM(247),
    /**
     * <pre>
     * Zimbabwe
     * </pre>
     *
     * <code>ZW = 248;</code>
     */
    ZW(248),
    UNRECOGNIZED(-1),
    ;

    /**
     * <pre>
     * Afghanistan
     * </pre>
     *
     * <code>AF = 0;</code>
     */
    public static final int AF_VALUE = 0;
    /**
     * <pre>
     * Ã…land Islands
     * </pre>
     *
     * <code>AX = 1;</code>
     */
    public static final int AX_VALUE = 1;
    /**
     * <pre>
     * Albania
     * </pre>
     *
     * <code>AL = 2;</code>
     */
    public static final int AL_VALUE = 2;
    /**
     * <pre>
     * Algeria
     * </pre>
     *
     * <code>DZ = 3;</code>
     */
    public static final int DZ_VALUE = 3;
    /**
     * <pre>
     * American Samoa
     * </pre>
     *
     * <code>AS = 4;</code>
     */
    public static final int AS_VALUE = 4;
    /**
     * <pre>
     * Andorra
     * </pre>
     *
     * <code>AD = 5;</code>
     */
    public static final int AD_VALUE = 5;
    /**
     * <pre>
     * Angola
     * </pre>
     *
     * <code>AO = 6;</code>
     */
    public static final int AO_VALUE = 6;
    /**
     * <pre>
     * Anguilla
     * </pre>
     *
     * <code>AI = 7;</code>
     */
    public static final int AI_VALUE = 7;
    /**
     * <pre>
     * Antarctica
     * </pre>
     *
     * <code>AQ = 8;</code>
     */
    public static final int AQ_VALUE = 8;
    /**
     * <pre>
     * Antigua and Barbuda
     * </pre>
     *
     * <code>AG = 9;</code>
     */
    public static final int AG_VALUE = 9;
    /**
     * <pre>
     * Argentina
     * </pre>
     *
     * <code>AR = 10;</code>
     */
    public static final int AR_VALUE = 10;
    /**
     * <pre>
     * Armenia
     * </pre>
     *
     * <code>AM = 11;</code>
     */
    public static final int AM_VALUE = 11;
    /**
     * <pre>
     * Aruba
     * </pre>
     *
     * <code>AW = 12;</code>
     */
    public static final int AW_VALUE = 12;
    /**
     * <pre>
     * Australia
     * </pre>
     *
     * <code>AU = 13;</code>
     */
    public static final int AU_VALUE = 13;
    /**
     * <pre>
     * Austria
     * </pre>
     *
     * <code>AT = 14;</code>
     */
    public static final int AT_VALUE = 14;
    /**
     * <pre>
     * Azerbaijan
     * </pre>
     *
     * <code>AZ = 15;</code>
     */
    public static final int AZ_VALUE = 15;
    /**
     * <pre>
     * Bahamas
     * </pre>
     *
     * <code>BS = 16;</code>
     */
    public static final int BS_VALUE = 16;
    /**
     * <pre>
     * Bahrain
     * </pre>
     *
     * <code>BH = 17;</code>
     */
    public static final int BH_VALUE = 17;
    /**
     * <pre>
     * Bangladesh
     * </pre>
     *
     * <code>BD = 18;</code>
     */
    public static final int BD_VALUE = 18;
    /**
     * <pre>
     * Barbados
     * </pre>
     *
     * <code>BB = 19;</code>
     */
    public static final int BB_VALUE = 19;
    /**
     * <pre>
     * Belarus
     * </pre>
     *
     * <code>BY = 20;</code>
     */
    public static final int BY_VALUE = 20;
    /**
     * <pre>
     * Belgium
     * </pre>
     *
     * <code>BE = 21;</code>
     */
    public static final int BE_VALUE = 21;
    /**
     * <pre>
     * Belize
     * </pre>
     *
     * <code>BZ = 22;</code>
     */
    public static final int BZ_VALUE = 22;
    /**
     * <pre>
     * Benin
     * </pre>
     *
     * <code>BJ = 23;</code>
     */
    public static final int BJ_VALUE = 23;
    /**
     * <pre>
     * Bermuda
     * </pre>
     *
     * <code>BM = 24;</code>
     */
    public static final int BM_VALUE = 24;
    /**
     * <pre>
     * Bhutan
     * </pre>
     *
     * <code>BT = 25;</code>
     */
    public static final int BT_VALUE = 25;
    /**
     * <pre>
     * "Bolivia, Plurinational State of"
     * </pre>
     *
     * <code>BO = 26;</code>
     */
    public static final int BO_VALUE = 26;
    /**
     * <pre>
     * "Bonaire, Sint Eustatius and Saba"
     * </pre>
     *
     * <code>BQ = 27;</code>
     */
    public static final int BQ_VALUE = 27;
    /**
     * <pre>
     * Bosnia and Herzegovina
     * </pre>
     *
     * <code>BA = 28;</code>
     */
    public static final int BA_VALUE = 28;
    /**
     * <pre>
     * Botswana
     * </pre>
     *
     * <code>BW = 29;</code>
     */
    public static final int BW_VALUE = 29;
    /**
     * <pre>
     * Bouvet Island
     * </pre>
     *
     * <code>BV = 30;</code>
     */
    public static final int BV_VALUE = 30;
    /**
     * <pre>
     * Brazil
     * </pre>
     *
     * <code>BR = 31;</code>
     */
    public static final int BR_VALUE = 31;
    /**
     * <pre>
     * British Indian Ocean Territory
     * </pre>
     *
     * <code>IO = 32;</code>
     */
    public static final int IO_VALUE = 32;
    /**
     * <pre>
     * Brunei Darussalam
     * </pre>
     *
     * <code>BN = 33;</code>
     */
    public static final int BN_VALUE = 33;
    /**
     * <pre>
     * Bulgaria
     * </pre>
     *
     * <code>BG = 34;</code>
     */
    public static final int BG_VALUE = 34;
    /**
     * <pre>
     * Burkina Faso
     * </pre>
     *
     * <code>BF = 35;</code>
     */
    public static final int BF_VALUE = 35;
    /**
     * <pre>
     * Burundi
     * </pre>
     *
     * <code>BI = 36;</code>
     */
    public static final int BI_VALUE = 36;
    /**
     * <pre>
     * Cambodia
     * </pre>
     *
     * <code>KH = 37;</code>
     */
    public static final int KH_VALUE = 37;
    /**
     * <pre>
     * Cameroon
     * </pre>
     *
     * <code>CM = 38;</code>
     */
    public static final int CM_VALUE = 38;
    /**
     * <pre>
     * Canada
     * </pre>
     *
     * <code>CA = 39;</code>
     */
    public static final int CA_VALUE = 39;
    /**
     * <pre>
     * Cape Verde
     * </pre>
     *
     * <code>CV = 40;</code>
     */
    public static final int CV_VALUE = 40;
    /**
     * <pre>
     * Cayman Islands
     * </pre>
     *
     * <code>KY = 41;</code>
     */
    public static final int KY_VALUE = 41;
    /**
     * <pre>
     * Central African Republic
     * </pre>
     *
     * <code>CF = 42;</code>
     */
    public static final int CF_VALUE = 42;
    /**
     * <pre>
     * Chad
     * </pre>
     *
     * <code>TD = 43;</code>
     */
    public static final int TD_VALUE = 43;
    /**
     * <pre>
     * Chile
     * </pre>
     *
     * <code>CL = 44;</code>
     */
    public static final int CL_VALUE = 44;
    /**
     * <pre>
     * China
     * </pre>
     *
     * <code>CN = 45;</code>
     */
    public static final int CN_VALUE = 45;
    /**
     * <pre>
     * Christmas Island
     * </pre>
     *
     * <code>CX = 46;</code>
     */
    public static final int CX_VALUE = 46;
    /**
     * <pre>
     * Cocos (Keeling) Islands
     * </pre>
     *
     * <code>CC = 47;</code>
     */
    public static final int CC_VALUE = 47;
    /**
     * <pre>
     * Colombia
     * </pre>
     *
     * <code>CO = 48;</code>
     */
    public static final int CO_VALUE = 48;
    /**
     * <pre>
     * Comoros
     * </pre>
     *
     * <code>KM = 49;</code>
     */
    public static final int KM_VALUE = 49;
    /**
     * <pre>
     * Congo
     * </pre>
     *
     * <code>CG = 50;</code>
     */
    public static final int CG_VALUE = 50;
    /**
     * <pre>
     * "Congo, the Democratic Republic of the"
     * </pre>
     *
     * <code>CD = 51;</code>
     */
    public static final int CD_VALUE = 51;
    /**
     * <pre>
     * Cook Islands
     * </pre>
     *
     * <code>CK = 52;</code>
     */
    public static final int CK_VALUE = 52;
    /**
     * <pre>
     * Costa Rica
     * </pre>
     *
     * <code>CR = 53;</code>
     */
    public static final int CR_VALUE = 53;
    /**
     * <pre>
     * CÃ´te d'Ivoire
     * </pre>
     *
     * <code>CI = 54;</code>
     */
    public static final int CI_VALUE = 54;
    /**
     * <pre>
     * Croatia
     * </pre>
     *
     * <code>HR = 55;</code>
     */
    public static final int HR_VALUE = 55;
    /**
     * <pre>
     * Cuba
     * </pre>
     *
     * <code>CU = 56;</code>
     */
    public static final int CU_VALUE = 56;
    /**
     * <pre>
     * CuraÃ§ao
     * </pre>
     *
     * <code>CW = 57;</code>
     */
    public static final int CW_VALUE = 57;
    /**
     * <pre>
     * Cyprus
     * </pre>
     *
     * <code>CY = 58;</code>
     */
    public static final int CY_VALUE = 58;
    /**
     * <pre>
     * Czech Republic
     * </pre>
     *
     * <code>CZ = 59;</code>
     */
    public static final int CZ_VALUE = 59;
    /**
     * <pre>
     * Denmark
     * </pre>
     *
     * <code>DK = 60;</code>
     */
    public static final int DK_VALUE = 60;
    /**
     * <pre>
     * Djibouti
     * </pre>
     *
     * <code>DJ = 61;</code>
     */
    public static final int DJ_VALUE = 61;
    /**
     * <pre>
     * Dominica
     * </pre>
     *
     * <code>DM = 62;</code>
     */
    public static final int DM_VALUE = 62;
    /**
     * <pre>
     * Dominican Republic
     * </pre>
     *
     * <code>DO = 63;</code>
     */
    public static final int DO_VALUE = 63;
    /**
     * <pre>
     * Ecuador
     * </pre>
     *
     * <code>EC = 64;</code>
     */
    public static final int EC_VALUE = 64;
    /**
     * <pre>
     * Egypt
     * </pre>
     *
     * <code>EG = 65;</code>
     */
    public static final int EG_VALUE = 65;
    /**
     * <pre>
     * El Salvador
     * </pre>
     *
     * <code>SV = 66;</code>
     */
    public static final int SV_VALUE = 66;
    /**
     * <pre>
     * Equatorial Guinea
     * </pre>
     *
     * <code>GQ = 67;</code>
     */
    public static final int GQ_VALUE = 67;
    /**
     * <pre>
     * Eritrea
     * </pre>
     *
     * <code>ER = 68;</code>
     */
    public static final int ER_VALUE = 68;
    /**
     * <pre>
     * Estonia
     * </pre>
     *
     * <code>EE = 69;</code>
     */
    public static final int EE_VALUE = 69;
    /**
     * <pre>
     * Ethiopia
     * </pre>
     *
     * <code>ET = 70;</code>
     */
    public static final int ET_VALUE = 70;
    /**
     * <pre>
     * Falkland Islands (Malvinas)
     * </pre>
     *
     * <code>FK = 71;</code>
     */
    public static final int FK_VALUE = 71;
    /**
     * <pre>
     * Faroe Islands
     * </pre>
     *
     * <code>FO = 72;</code>
     */
    public static final int FO_VALUE = 72;
    /**
     * <pre>
     * Fiji
     * </pre>
     *
     * <code>FJ = 73;</code>
     */
    public static final int FJ_VALUE = 73;
    /**
     * <pre>
     * Finland
     * </pre>
     *
     * <code>FI = 74;</code>
     */
    public static final int FI_VALUE = 74;
    /**
     * <pre>
     * France
     * </pre>
     *
     * <code>FR = 75;</code>
     */
    public static final int FR_VALUE = 75;
    /**
     * <pre>
     * French Guiana
     * </pre>
     *
     * <code>GF = 76;</code>
     */
    public static final int GF_VALUE = 76;
    /**
     * <pre>
     * French Polynesia
     * </pre>
     *
     * <code>PF = 77;</code>
     */
    public static final int PF_VALUE = 77;
    /**
     * <pre>
     * French Southern Territories
     * </pre>
     *
     * <code>TF = 78;</code>
     */
    public static final int TF_VALUE = 78;
    /**
     * <pre>
     * Gabon
     * </pre>
     *
     * <code>GA = 79;</code>
     */
    public static final int GA_VALUE = 79;
    /**
     * <pre>
     * Gambia
     * </pre>
     *
     * <code>GM = 80;</code>
     */
    public static final int GM_VALUE = 80;
    /**
     * <pre>
     * Georgia
     * </pre>
     *
     * <code>GE = 81;</code>
     */
    public static final int GE_VALUE = 81;
    /**
     * <pre>
     * Germany
     * </pre>
     *
     * <code>DE = 82;</code>
     */
    public static final int DE_VALUE = 82;
    /**
     * <pre>
     * Ghana
     * </pre>
     *
     * <code>GH = 83;</code>
     */
    public static final int GH_VALUE = 83;
    /**
     * <pre>
     * Gibraltar
     * </pre>
     *
     * <code>GI = 84;</code>
     */
    public static final int GI_VALUE = 84;
    /**
     * <pre>
     * Greece
     * </pre>
     *
     * <code>GR = 85;</code>
     */
    public static final int GR_VALUE = 85;
    /**
     * <pre>
     * Greenland
     * </pre>
     *
     * <code>GL = 86;</code>
     */
    public static final int GL_VALUE = 86;
    /**
     * <pre>
     * Grenada
     * </pre>
     *
     * <code>GD = 87;</code>
     */
    public static final int GD_VALUE = 87;
    /**
     * <pre>
     * Guadeloupe
     * </pre>
     *
     * <code>GP = 88;</code>
     */
    public static final int GP_VALUE = 88;
    /**
     * <pre>
     * Guam
     * </pre>
     *
     * <code>GU = 89;</code>
     */
    public static final int GU_VALUE = 89;
    /**
     * <pre>
     * Guatemala
     * </pre>
     *
     * <code>GT = 90;</code>
     */
    public static final int GT_VALUE = 90;
    /**
     * <pre>
     * Guernsey
     * </pre>
     *
     * <code>GG = 91;</code>
     */
    public static final int GG_VALUE = 91;
    /**
     * <pre>
     * Guinea
     * </pre>
     *
     * <code>GN = 92;</code>
     */
    public static final int GN_VALUE = 92;
    /**
     * <pre>
     * Guinea-Bissau
     * </pre>
     *
     * <code>GW = 93;</code>
     */
    public static final int GW_VALUE = 93;
    /**
     * <pre>
     * Guyana
     * </pre>
     *
     * <code>GY = 94;</code>
     */
    public static final int GY_VALUE = 94;
    /**
     * <pre>
     * Haiti
     * </pre>
     *
     * <code>HT = 95;</code>
     */
    public static final int HT_VALUE = 95;
    /**
     * <pre>
     * Heard Island and McDonald Islands
     * </pre>
     *
     * <code>HM = 96;</code>
     */
    public static final int HM_VALUE = 96;
    /**
     * <pre>
     * Holy See (Vatican City State)
     * </pre>
     *
     * <code>VA = 97;</code>
     */
    public static final int VA_VALUE = 97;
    /**
     * <pre>
     * Honduras
     * </pre>
     *
     * <code>HN = 98;</code>
     */
    public static final int HN_VALUE = 98;
    /**
     * <pre>
     * Hong Kong
     * </pre>
     *
     * <code>HK = 99;</code>
     */
    public static final int HK_VALUE = 99;
    /**
     * <pre>
     * Hungary
     * </pre>
     *
     * <code>HU = 100;</code>
     */
    public static final int HU_VALUE = 100;
    /**
     * <pre>
     * Iceland
     * </pre>
     *
     * <code>IS = 101;</code>
     */
    public static final int IS_VALUE = 101;
    /**
     * <pre>
     * India
     * </pre>
     *
     * <code>IN = 102;</code>
     */
    public static final int IN_VALUE = 102;
    /**
     * <pre>
     * Indonesia
     * </pre>
     *
     * <code>ID = 103;</code>
     */
    public static final int ID_VALUE = 103;
    /**
     * <pre>
     * "Iran, Islamic Republic of"
     * </pre>
     *
     * <code>IR = 104;</code>
     */
    public static final int IR_VALUE = 104;
    /**
     * <pre>
     * Iraq
     * </pre>
     *
     * <code>IQ = 105;</code>
     */
    public static final int IQ_VALUE = 105;
    /**
     * <pre>
     * Ireland
     * </pre>
     *
     * <code>IE = 106;</code>
     */
    public static final int IE_VALUE = 106;
    /**
     * <pre>
     * Isle of Man
     * </pre>
     *
     * <code>IM = 107;</code>
     */
    public static final int IM_VALUE = 107;
    /**
     * <pre>
     * Israel
     * </pre>
     *
     * <code>IL = 108;</code>
     */
    public static final int IL_VALUE = 108;
    /**
     * <pre>
     * Italy
     * </pre>
     *
     * <code>IT = 109;</code>
     */
    public static final int IT_VALUE = 109;
    /**
     * <pre>
     * Jamaica
     * </pre>
     *
     * <code>JM = 110;</code>
     */
    public static final int JM_VALUE = 110;
    /**
     * <pre>
     * Japan
     * </pre>
     *
     * <code>JP = 111;</code>
     */
    public static final int JP_VALUE = 111;
    /**
     * <pre>
     * Jersey
     * </pre>
     *
     * <code>JE = 112;</code>
     */
    public static final int JE_VALUE = 112;
    /**
     * <pre>
     * Jordan
     * </pre>
     *
     * <code>JO = 113;</code>
     */
    public static final int JO_VALUE = 113;
    /**
     * <pre>
     * Kazakhstan
     * </pre>
     *
     * <code>KZ = 114;</code>
     */
    public static final int KZ_VALUE = 114;
    /**
     * <pre>
     * Kenya
     * </pre>
     *
     * <code>KE = 115;</code>
     */
    public static final int KE_VALUE = 115;
    /**
     * <pre>
     * Kiribati
     * </pre>
     *
     * <code>KI = 116;</code>
     */
    public static final int KI_VALUE = 116;
    /**
     * <pre>
     * "Korea, Democratic People's Republic of"
     * </pre>
     *
     * <code>KP = 117;</code>
     */
    public static final int KP_VALUE = 117;
    /**
     * <pre>
     * "Korea, Republic of"
     * </pre>
     *
     * <code>KR = 118;</code>
     */
    public static final int KR_VALUE = 118;
    /**
     * <pre>
     * Kuwait
     * </pre>
     *
     * <code>KW = 119;</code>
     */
    public static final int KW_VALUE = 119;
    /**
     * <pre>
     * Kyrgyzstan
     * </pre>
     *
     * <code>KG = 120;</code>
     */
    public static final int KG_VALUE = 120;
    /**
     * <pre>
     * Lao People's Democratic Republic
     * </pre>
     *
     * <code>LA = 121;</code>
     */
    public static final int LA_VALUE = 121;
    /**
     * <pre>
     * Latvia
     * </pre>
     *
     * <code>LV = 122;</code>
     */
    public static final int LV_VALUE = 122;
    /**
     * <pre>
     * Lebanon
     * </pre>
     *
     * <code>LB = 123;</code>
     */
    public static final int LB_VALUE = 123;
    /**
     * <pre>
     * Lesotho
     * </pre>
     *
     * <code>LS = 124;</code>
     */
    public static final int LS_VALUE = 124;
    /**
     * <pre>
     * Liberia
     * </pre>
     *
     * <code>LR = 125;</code>
     */
    public static final int LR_VALUE = 125;
    /**
     * <pre>
     * Libya
     * </pre>
     *
     * <code>LY = 126;</code>
     */
    public static final int LY_VALUE = 126;
    /**
     * <pre>
     * Liechtenstein
     * </pre>
     *
     * <code>LI = 127;</code>
     */
    public static final int LI_VALUE = 127;
    /**
     * <pre>
     * Lithuania
     * </pre>
     *
     * <code>LT = 128;</code>
     */
    public static final int LT_VALUE = 128;
    /**
     * <pre>
     * Luxembourg
     * </pre>
     *
     * <code>LU = 129;</code>
     */
    public static final int LU_VALUE = 129;
    /**
     * <pre>
     * Macao
     * </pre>
     *
     * <code>MO = 130;</code>
     */
    public static final int MO_VALUE = 130;
    /**
     * <pre>
     * "Macedonia, the Former Yugoslav Republic of"
     * </pre>
     *
     * <code>MK = 131;</code>
     */
    public static final int MK_VALUE = 131;
    /**
     * <pre>
     * Madagascar
     * </pre>
     *
     * <code>MG = 132;</code>
     */
    public static final int MG_VALUE = 132;
    /**
     * <pre>
     * Malawi
     * </pre>
     *
     * <code>MW = 133;</code>
     */
    public static final int MW_VALUE = 133;
    /**
     * <pre>
     * Malaysia
     * </pre>
     *
     * <code>MY = 134;</code>
     */
    public static final int MY_VALUE = 134;
    /**
     * <pre>
     * Maldives
     * </pre>
     *
     * <code>MV = 135;</code>
     */
    public static final int MV_VALUE = 135;
    /**
     * <pre>
     * Mali
     * </pre>
     *
     * <code>ML = 136;</code>
     */
    public static final int ML_VALUE = 136;
    /**
     * <pre>
     * Malta
     * </pre>
     *
     * <code>MT = 137;</code>
     */
    public static final int MT_VALUE = 137;
    /**
     * <pre>
     * Marshall Islands
     * </pre>
     *
     * <code>MH = 138;</code>
     */
    public static final int MH_VALUE = 138;
    /**
     * <pre>
     * Martinique
     * </pre>
     *
     * <code>MQ = 139;</code>
     */
    public static final int MQ_VALUE = 139;
    /**
     * <pre>
     * Mauritania
     * </pre>
     *
     * <code>MR = 140;</code>
     */
    public static final int MR_VALUE = 140;
    /**
     * <pre>
     * Mauritius
     * </pre>
     *
     * <code>MU = 141;</code>
     */
    public static final int MU_VALUE = 141;
    /**
     * <pre>
     * Mayotte
     * </pre>
     *
     * <code>YT = 142;</code>
     */
    public static final int YT_VALUE = 142;
    /**
     * <pre>
     * Mexico
     * </pre>
     *
     * <code>MX = 143;</code>
     */
    public static final int MX_VALUE = 143;
    /**
     * <pre>
     * "Micronesia, Federated States of"
     * </pre>
     *
     * <code>FM = 144;</code>
     */
    public static final int FM_VALUE = 144;
    /**
     * <pre>
     * "Moldova, Republic of"
     * </pre>
     *
     * <code>MD = 145;</code>
     */
    public static final int MD_VALUE = 145;
    /**
     * <pre>
     * Monaco
     * </pre>
     *
     * <code>MC = 146;</code>
     */
    public static final int MC_VALUE = 146;
    /**
     * <pre>
     * Mongolia
     * </pre>
     *
     * <code>MN = 147;</code>
     */
    public static final int MN_VALUE = 147;
    /**
     * <pre>
     * Montenegro
     * </pre>
     *
     * <code>ME = 148;</code>
     */
    public static final int ME_VALUE = 148;
    /**
     * <pre>
     * Montserrat
     * </pre>
     *
     * <code>MS = 149;</code>
     */
    public static final int MS_VALUE = 149;
    /**
     * <pre>
     * Morocco
     * </pre>
     *
     * <code>MA = 150;</code>
     */
    public static final int MA_VALUE = 150;
    /**
     * <pre>
     * Mozambique
     * </pre>
     *
     * <code>MZ = 151;</code>
     */
    public static final int MZ_VALUE = 151;
    /**
     * <pre>
     * Myanmar
     * </pre>
     *
     * <code>MM = 152;</code>
     */
    public static final int MM_VALUE = 152;
    /**
     * <pre>
     * Namibia
     * </pre>
     *
     * <code>NA = 153;</code>
     */
    public static final int NA_VALUE = 153;
    /**
     * <pre>
     * Nauru
     * </pre>
     *
     * <code>NR = 154;</code>
     */
    public static final int NR_VALUE = 154;
    /**
     * <pre>
     * Nepal
     * </pre>
     *
     * <code>NP = 155;</code>
     */
    public static final int NP_VALUE = 155;
    /**
     * <pre>
     * Netherlands
     * </pre>
     *
     * <code>NL = 156;</code>
     */
    public static final int NL_VALUE = 156;
    /**
     * <pre>
     * New Caledonia
     * </pre>
     *
     * <code>NC = 157;</code>
     */
    public static final int NC_VALUE = 157;
    /**
     * <pre>
     * New Zealand
     * </pre>
     *
     * <code>NZ = 158;</code>
     */
    public static final int NZ_VALUE = 158;
    /**
     * <pre>
     * Nicaragua
     * </pre>
     *
     * <code>NI = 159;</code>
     */
    public static final int NI_VALUE = 159;
    /**
     * <pre>
     * Niger
     * </pre>
     *
     * <code>NE = 160;</code>
     */
    public static final int NE_VALUE = 160;
    /**
     * <pre>
     * Nigeria
     * </pre>
     *
     * <code>NG = 161;</code>
     */
    public static final int NG_VALUE = 161;
    /**
     * <pre>
     * Niue
     * </pre>
     *
     * <code>NU = 162;</code>
     */
    public static final int NU_VALUE = 162;
    /**
     * <pre>
     * Norfolk Island
     * </pre>
     *
     * <code>NF = 163;</code>
     */
    public static final int NF_VALUE = 163;
    /**
     * <pre>
     * Northern Mariana Islands
     * </pre>
     *
     * <code>MP = 164;</code>
     */
    public static final int MP_VALUE = 164;
    /**
     * <pre>
     * Norway
     * </pre>
     *
     * <code>NO = 165;</code>
     */
    public static final int NO_VALUE = 165;
    /**
     * <pre>
     * Oman
     * </pre>
     *
     * <code>OM = 166;</code>
     */
    public static final int OM_VALUE = 166;
    /**
     * <pre>
     * Pakistan
     * </pre>
     *
     * <code>PK = 167;</code>
     */
    public static final int PK_VALUE = 167;
    /**
     * <pre>
     * Palau
     * </pre>
     *
     * <code>PW = 168;</code>
     */
    public static final int PW_VALUE = 168;
    /**
     * <pre>
     * "Palestine, State of"
     * </pre>
     *
     * <code>PS = 169;</code>
     */
    public static final int PS_VALUE = 169;
    /**
     * <pre>
     * Panama
     * </pre>
     *
     * <code>PA = 170;</code>
     */
    public static final int PA_VALUE = 170;
    /**
     * <pre>
     * Papua New Guinea
     * </pre>
     *
     * <code>PG = 171;</code>
     */
    public static final int PG_VALUE = 171;
    /**
     * <pre>
     * Paraguay
     * </pre>
     *
     * <code>PY = 172;</code>
     */
    public static final int PY_VALUE = 172;
    /**
     * <pre>
     * Peru
     * </pre>
     *
     * <code>PE = 173;</code>
     */
    public static final int PE_VALUE = 173;
    /**
     * <pre>
     * Philippines
     * </pre>
     *
     * <code>PH = 174;</code>
     */
    public static final int PH_VALUE = 174;
    /**
     * <pre>
     * Pitcairn
     * </pre>
     *
     * <code>PN = 175;</code>
     */
    public static final int PN_VALUE = 175;
    /**
     * <pre>
     * Poland
     * </pre>
     *
     * <code>PL = 176;</code>
     */
    public static final int PL_VALUE = 176;
    /**
     * <pre>
     * Portugal
     * </pre>
     *
     * <code>PT = 177;</code>
     */
    public static final int PT_VALUE = 177;
    /**
     * <pre>
     * Puerto Rico
     * </pre>
     *
     * <code>PR = 178;</code>
     */
    public static final int PR_VALUE = 178;
    /**
     * <pre>
     * Qatar
     * </pre>
     *
     * <code>QA = 179;</code>
     */
    public static final int QA_VALUE = 179;
    /**
     * <pre>
     * RÃ©union
     * </pre>
     *
     * <code>RE = 180;</code>
     */
    public static final int RE_VALUE = 180;
    /**
     * <pre>
     * Romania
     * </pre>
     *
     * <code>RO = 181;</code>
     */
    public static final int RO_VALUE = 181;
    /**
     * <pre>
     * Russian Federation
     * </pre>
     *
     * <code>RU = 182;</code>
     */
    public static final int RU_VALUE = 182;
    /**
     * <pre>
     * Rwanda
     * </pre>
     *
     * <code>RW = 183;</code>
     */
    public static final int RW_VALUE = 183;
    /**
     * <pre>
     * Saint BarthÃ©lemy
     * </pre>
     *
     * <code>BL = 184;</code>
     */
    public static final int BL_VALUE = 184;
    /**
     * <pre>
     * "Saint Helena, Ascension and Tristan da Cunha"
     * </pre>
     *
     * <code>SH = 185;</code>
     */
    public static final int SH_VALUE = 185;
    /**
     * <pre>
     * Saint Kitts and Nevis
     * </pre>
     *
     * <code>KN = 186;</code>
     */
    public static final int KN_VALUE = 186;
    /**
     * <pre>
     * Saint Lucia
     * </pre>
     *
     * <code>LC = 187;</code>
     */
    public static final int LC_VALUE = 187;
    /**
     * <pre>
     * Saint Martin (French part)
     * </pre>
     *
     * <code>MF = 188;</code>
     */
    public static final int MF_VALUE = 188;
    /**
     * <pre>
     * Saint Pierre and Miquelon
     * </pre>
     *
     * <code>PM = 189;</code>
     */
    public static final int PM_VALUE = 189;
    /**
     * <pre>
     * Saint Vincent and the Grenadines
     * </pre>
     *
     * <code>VC = 190;</code>
     */
    public static final int VC_VALUE = 190;
    /**
     * <pre>
     * Samoa
     * </pre>
     *
     * <code>WS = 191;</code>
     */
    public static final int WS_VALUE = 191;
    /**
     * <pre>
     * San Marino
     * </pre>
     *
     * <code>SM = 192;</code>
     */
    public static final int SM_VALUE = 192;
    /**
     * <pre>
     * Sao Tome and Principe
     * </pre>
     *
     * <code>ST = 193;</code>
     */
    public static final int ST_VALUE = 193;
    /**
     * <pre>
     * Saudi Arabia
     * </pre>
     *
     * <code>SA = 194;</code>
     */
    public static final int SA_VALUE = 194;
    /**
     * <pre>
     * Senegal
     * </pre>
     *
     * <code>SN = 195;</code>
     */
    public static final int SN_VALUE = 195;
    /**
     * <pre>
     * Serbia
     * </pre>
     *
     * <code>RS = 196;</code>
     */
    public static final int RS_VALUE = 196;
    /**
     * <pre>
     * Seychelles
     * </pre>
     *
     * <code>SC = 197;</code>
     */
    public static final int SC_VALUE = 197;
    /**
     * <pre>
     * Sierra Leone
     * </pre>
     *
     * <code>SL = 198;</code>
     */
    public static final int SL_VALUE = 198;
    /**
     * <pre>
     * Singapore
     * </pre>
     *
     * <code>SG = 199;</code>
     */
    public static final int SG_VALUE = 199;
    /**
     * <pre>
     * Sint Maarten (Dutch part)
     * </pre>
     *
     * <code>SX = 200;</code>
     */
    public static final int SX_VALUE = 200;
    /**
     * <pre>
     * Slovakia
     * </pre>
     *
     * <code>SK = 201;</code>
     */
    public static final int SK_VALUE = 201;
    /**
     * <pre>
     * Slovenia
     * </pre>
     *
     * <code>SI = 202;</code>
     */
    public static final int SI_VALUE = 202;
    /**
     * <pre>
     * Solomon Islands
     * </pre>
     *
     * <code>SB = 203;</code>
     */
    public static final int SB_VALUE = 203;
    /**
     * <pre>
     * Somalia
     * </pre>
     *
     * <code>SO = 204;</code>
     */
    public static final int SO_VALUE = 204;
    /**
     * <pre>
     * South Africa
     * </pre>
     *
     * <code>ZA = 205;</code>
     */
    public static final int ZA_VALUE = 205;
    /**
     * <pre>
     * South Georgia and the South Sandwich Islands
     * </pre>
     *
     * <code>GS = 206;</code>
     */
    public static final int GS_VALUE = 206;
    /**
     * <pre>
     * South Sudan
     * </pre>
     *
     * <code>SS = 207;</code>
     */
    public static final int SS_VALUE = 207;
    /**
     * <pre>
     * Spain
     * </pre>
     *
     * <code>ES = 208;</code>
     */
    public static final int ES_VALUE = 208;
    /**
     * <pre>
     * Sri Lanka
     * </pre>
     *
     * <code>LK = 209;</code>
     */
    public static final int LK_VALUE = 209;
    /**
     * <pre>
     * Sudan
     * </pre>
     *
     * <code>SD = 210;</code>
     */
    public static final int SD_VALUE = 210;
    /**
     * <pre>
     * Suriname
     * </pre>
     *
     * <code>SR = 211;</code>
     */
    public static final int SR_VALUE = 211;
    /**
     * <pre>
     * Svalbard and Jan Mayen
     * </pre>
     *
     * <code>SJ = 212;</code>
     */
    public static final int SJ_VALUE = 212;
    /**
     * <pre>
     * Swaziland
     * </pre>
     *
     * <code>SZ = 213;</code>
     */
    public static final int SZ_VALUE = 213;
    /**
     * <pre>
     * Sweden
     * </pre>
     *
     * <code>SE = 214;</code>
     */
    public static final int SE_VALUE = 214;
    /**
     * <pre>
     * Switzerland
     * </pre>
     *
     * <code>CH = 215;</code>
     */
    public static final int CH_VALUE = 215;
    /**
     * <pre>
     * Syrian Arab Republic
     * </pre>
     *
     * <code>SY = 216;</code>
     */
    public static final int SY_VALUE = 216;
    /**
     * <pre>
     * "Taiwan, Province of China"
     * </pre>
     *
     * <code>TW = 217;</code>
     */
    public static final int TW_VALUE = 217;
    /**
     * <pre>
     * Tajikistan
     * </pre>
     *
     * <code>TJ = 218;</code>
     */
    public static final int TJ_VALUE = 218;
    /**
     * <pre>
     * "Tanzania, United Republic of"
     * </pre>
     *
     * <code>TZ = 219;</code>
     */
    public static final int TZ_VALUE = 219;
    /**
     * <pre>
     * Thailand
     * </pre>
     *
     * <code>TH = 220;</code>
     */
    public static final int TH_VALUE = 220;
    /**
     * <pre>
     * Timor-Leste
     * </pre>
     *
     * <code>TL = 221;</code>
     */
    public static final int TL_VALUE = 221;
    /**
     * <pre>
     * Togo
     * </pre>
     *
     * <code>TG = 222;</code>
     */
    public static final int TG_VALUE = 222;
    /**
     * <pre>
     * Tokelau
     * </pre>
     *
     * <code>TK = 223;</code>
     */
    public static final int TK_VALUE = 223;
    /**
     * <pre>
     * Tonga
     * </pre>
     *
     * <code>TO = 224;</code>
     */
    public static final int TO_VALUE = 224;
    /**
     * <pre>
     * Trinidad and Tobago
     * </pre>
     *
     * <code>TT = 225;</code>
     */
    public static final int TT_VALUE = 225;
    /**
     * <pre>
     * Tunisia
     * </pre>
     *
     * <code>TN = 226;</code>
     */
    public static final int TN_VALUE = 226;
    /**
     * <pre>
     * Turkey
     * </pre>
     *
     * <code>TR = 227;</code>
     */
    public static final int TR_VALUE = 227;
    /**
     * <pre>
     * Turkmenistan
     * </pre>
     *
     * <code>TM = 228;</code>
     */
    public static final int TM_VALUE = 228;
    /**
     * <pre>
     * Turks and Caicos Islands
     * </pre>
     *
     * <code>TC = 229;</code>
     */
    public static final int TC_VALUE = 229;
    /**
     * <pre>
     * Tuvalu
     * </pre>
     *
     * <code>TV = 230;</code>
     */
    public static final int TV_VALUE = 230;
    /**
     * <pre>
     * Uganda
     * </pre>
     *
     * <code>UG = 231;</code>
     */
    public static final int UG_VALUE = 231;
    /**
     * <pre>
     * Ukraine
     * </pre>
     *
     * <code>UA = 232;</code>
     */
    public static final int UA_VALUE = 232;
    /**
     * <pre>
     * United Arab Emirates
     * </pre>
     *
     * <code>AE = 233;</code>
     */
    public static final int AE_VALUE = 233;
    /**
     * <pre>
     * United Kingdom
     * </pre>
     *
     * <code>GB = 234;</code>
     */
    public static final int GB_VALUE = 234;
    /**
     * <pre>
     * United States
     * </pre>
     *
     * <code>US = 235;</code>
     */
    public static final int US_VALUE = 235;
    /**
     * <pre>
     * United States Minor Outlying Islands
     * </pre>
     *
     * <code>UM = 236;</code>
     */
    public static final int UM_VALUE = 236;
    /**
     * <pre>
     * Uruguay
     * </pre>
     *
     * <code>UY = 237;</code>
     */
    public static final int UY_VALUE = 237;
    /**
     * <pre>
     * Uzbekistan
     * </pre>
     *
     * <code>UZ = 238;</code>
     */
    public static final int UZ_VALUE = 238;
    /**
     * <pre>
     * Vanuatu
     * </pre>
     *
     * <code>VU = 239;</code>
     */
    public static final int VU_VALUE = 239;
    /**
     * <pre>
     * "Venezuela, Bolivarian Republic of"
     * </pre>
     *
     * <code>VE = 240;</code>
     */
    public static final int VE_VALUE = 240;
    /**
     * <pre>
     * Viet Nam
     * </pre>
     *
     * <code>VN = 241;</code>
     */
    public static final int VN_VALUE = 241;
    /**
     * <pre>
     * "Virgin Islands, British"
     * </pre>
     *
     * <code>VG = 242;</code>
     */
    public static final int VG_VALUE = 242;
    /**
     * <pre>
     * "Virgin Islands, U.S."
     * </pre>
     *
     * <code>VI = 243;</code>
     */
    public static final int VI_VALUE = 243;
    /**
     * <pre>
     * Wallis and Futuna
     * </pre>
     *
     * <code>WF = 244;</code>
     */
    public static final int WF_VALUE = 244;
    /**
     * <pre>
     * Western Sahara
     * </pre>
     *
     * <code>EH = 245;</code>
     */
    public static final int EH_VALUE = 245;
    /**
     * <pre>
     * Yemen
     * </pre>
     *
     * <code>YE = 246;</code>
     */
    public static final int YE_VALUE = 246;
    /**
     * <pre>
     * Zambia
     * </pre>
     *
     * <code>ZM = 247;</code>
     */
    public static final int ZM_VALUE = 247;
    /**
     * <pre>
     * Zimbabwe
     * </pre>
     *
     * <code>ZW = 248;</code>
     */
    public static final int ZW_VALUE = 248;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CountryCode valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CountryCode forNumber(int value) {
      switch (value) {
        case 0: return AF;
        case 1: return AX;
        case 2: return AL;
        case 3: return DZ;
        case 4: return AS;
        case 5: return AD;
        case 6: return AO;
        case 7: return AI;
        case 8: return AQ;
        case 9: return AG;
        case 10: return AR;
        case 11: return AM;
        case 12: return AW;
        case 13: return AU;
        case 14: return AT;
        case 15: return AZ;
        case 16: return BS;
        case 17: return BH;
        case 18: return BD;
        case 19: return BB;
        case 20: return BY;
        case 21: return BE;
        case 22: return BZ;
        case 23: return BJ;
        case 24: return BM;
        case 25: return BT;
        case 26: return BO;
        case 27: return BQ;
        case 28: return BA;
        case 29: return BW;
        case 30: return BV;
        case 31: return BR;
        case 32: return IO;
        case 33: return BN;
        case 34: return BG;
        case 35: return BF;
        case 36: return BI;
        case 37: return KH;
        case 38: return CM;
        case 39: return CA;
        case 40: return CV;
        case 41: return KY;
        case 42: return CF;
        case 43: return TD;
        case 44: return CL;
        case 45: return CN;
        case 46: return CX;
        case 47: return CC;
        case 48: return CO;
        case 49: return KM;
        case 50: return CG;
        case 51: return CD;
        case 52: return CK;
        case 53: return CR;
        case 54: return CI;
        case 55: return HR;
        case 56: return CU;
        case 57: return CW;
        case 58: return CY;
        case 59: return CZ;
        case 60: return DK;
        case 61: return DJ;
        case 62: return DM;
        case 63: return DO;
        case 64: return EC;
        case 65: return EG;
        case 66: return SV;
        case 67: return GQ;
        case 68: return ER;
        case 69: return EE;
        case 70: return ET;
        case 71: return FK;
        case 72: return FO;
        case 73: return FJ;
        case 74: return FI;
        case 75: return FR;
        case 76: return GF;
        case 77: return PF;
        case 78: return TF;
        case 79: return GA;
        case 80: return GM;
        case 81: return GE;
        case 82: return DE;
        case 83: return GH;
        case 84: return GI;
        case 85: return GR;
        case 86: return GL;
        case 87: return GD;
        case 88: return GP;
        case 89: return GU;
        case 90: return GT;
        case 91: return GG;
        case 92: return GN;
        case 93: return GW;
        case 94: return GY;
        case 95: return HT;
        case 96: return HM;
        case 97: return VA;
        case 98: return HN;
        case 99: return HK;
        case 100: return HU;
        case 101: return IS;
        case 102: return IN;
        case 103: return ID;
        case 104: return IR;
        case 105: return IQ;
        case 106: return IE;
        case 107: return IM;
        case 108: return IL;
        case 109: return IT;
        case 110: return JM;
        case 111: return JP;
        case 112: return JE;
        case 113: return JO;
        case 114: return KZ;
        case 115: return KE;
        case 116: return KI;
        case 117: return KP;
        case 118: return KR;
        case 119: return KW;
        case 120: return KG;
        case 121: return LA;
        case 122: return LV;
        case 123: return LB;
        case 124: return LS;
        case 125: return LR;
        case 126: return LY;
        case 127: return LI;
        case 128: return LT;
        case 129: return LU;
        case 130: return MO;
        case 131: return MK;
        case 132: return MG;
        case 133: return MW;
        case 134: return MY;
        case 135: return MV;
        case 136: return ML;
        case 137: return MT;
        case 138: return MH;
        case 139: return MQ;
        case 140: return MR;
        case 141: return MU;
        case 142: return YT;
        case 143: return MX;
        case 144: return FM;
        case 145: return MD;
        case 146: return MC;
        case 147: return MN;
        case 148: return ME;
        case 149: return MS;
        case 150: return MA;
        case 151: return MZ;
        case 152: return MM;
        case 153: return NA;
        case 154: return NR;
        case 155: return NP;
        case 156: return NL;
        case 157: return NC;
        case 158: return NZ;
        case 159: return NI;
        case 160: return NE;
        case 161: return NG;
        case 162: return NU;
        case 163: return NF;
        case 164: return MP;
        case 165: return NO;
        case 166: return OM;
        case 167: return PK;
        case 168: return PW;
        case 169: return PS;
        case 170: return PA;
        case 171: return PG;
        case 172: return PY;
        case 173: return PE;
        case 174: return PH;
        case 175: return PN;
        case 176: return PL;
        case 177: return PT;
        case 178: return PR;
        case 179: return QA;
        case 180: return RE;
        case 181: return RO;
        case 182: return RU;
        case 183: return RW;
        case 184: return BL;
        case 185: return SH;
        case 186: return KN;
        case 187: return LC;
        case 188: return MF;
        case 189: return PM;
        case 190: return VC;
        case 191: return WS;
        case 192: return SM;
        case 193: return ST;
        case 194: return SA;
        case 195: return SN;
        case 196: return RS;
        case 197: return SC;
        case 198: return SL;
        case 199: return SG;
        case 200: return SX;
        case 201: return SK;
        case 202: return SI;
        case 203: return SB;
        case 204: return SO;
        case 205: return ZA;
        case 206: return GS;
        case 207: return SS;
        case 208: return ES;
        case 209: return LK;
        case 210: return SD;
        case 211: return SR;
        case 212: return SJ;
        case 213: return SZ;
        case 214: return SE;
        case 215: return CH;
        case 216: return SY;
        case 217: return TW;
        case 218: return TJ;
        case 219: return TZ;
        case 220: return TH;
        case 221: return TL;
        case 222: return TG;
        case 223: return TK;
        case 224: return TO;
        case 225: return TT;
        case 226: return TN;
        case 227: return TR;
        case 228: return TM;
        case 229: return TC;
        case 230: return TV;
        case 231: return UG;
        case 232: return UA;
        case 233: return AE;
        case 234: return GB;
        case 235: return US;
        case 236: return UM;
        case 237: return UY;
        case 238: return UZ;
        case 239: return VU;
        case 240: return VE;
        case 241: return VN;
        case 242: return VG;
        case 243: return VI;
        case 244: return WF;
        case 245: return EH;
        case 246: return YE;
        case 247: return ZM;
        case 248: return ZW;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CountryCode>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CountryCode> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CountryCode>() {
            public CountryCode findValueByNumber(int number) {
              return CountryCode.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalStateException(
            "Can't get the descriptor of an unrecognized enum value.");
      }
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return Workstream.Protocol.Common.CountryCodeOuterClass.getDescriptor().getEnumTypes().get(0);
    }

    private static final CountryCode[] VALUES = values();

    public static CountryCode valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CountryCode(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:Workstream.Protocol.Common.CountryCode)
  }


  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\030Common/CountryCode.proto\022\032Workstream.P" +
      "rotocol.Common*\316\020\n\013CountryCode\022\006\n\002AF\020\000\022\006" +
      "\n\002AX\020\001\022\006\n\002AL\020\002\022\006\n\002DZ\020\003\022\006\n\002AS\020\004\022\006\n\002AD\020\005\022\006" +
      "\n\002AO\020\006\022\006\n\002AI\020\007\022\006\n\002AQ\020\010\022\006\n\002AG\020\t\022\006\n\002AR\020\n\022\006" +
      "\n\002AM\020\013\022\006\n\002AW\020\014\022\006\n\002AU\020\r\022\006\n\002AT\020\016\022\006\n\002AZ\020\017\022\006" +
      "\n\002BS\020\020\022\006\n\002BH\020\021\022\006\n\002BD\020\022\022\006\n\002BB\020\023\022\006\n\002BY\020\024\022\006" +
      "\n\002BE\020\025\022\006\n\002BZ\020\026\022\006\n\002BJ\020\027\022\006\n\002BM\020\030\022\006\n\002BT\020\031\022\006" +
      "\n\002BO\020\032\022\006\n\002BQ\020\033\022\006\n\002BA\020\034\022\006\n\002BW\020\035\022\006\n\002BV\020\036\022\006" +
      "\n\002BR\020\037\022\006\n\002IO\020 \022\006\n\002BN\020!\022\006\n\002BG\020\"\022\006\n\002BF\020#\022\006" +
      "\n\002BI\020$\022\006\n\002KH\020%\022\006\n\002CM\020&\022\006\n\002CA\020\'\022\006\n\002CV\020(\022\006" +
      "\n\002KY\020)\022\006\n\002CF\020*\022\006\n\002TD\020+\022\006\n\002CL\020,\022\006\n\002CN\020-\022\006" +
      "\n\002CX\020.\022\006\n\002CC\020/\022\006\n\002CO\0200\022\006\n\002KM\0201\022\006\n\002CG\0202\022\006" +
      "\n\002CD\0203\022\006\n\002CK\0204\022\006\n\002CR\0205\022\006\n\002CI\0206\022\006\n\002HR\0207\022\006" +
      "\n\002CU\0208\022\006\n\002CW\0209\022\006\n\002CY\020:\022\006\n\002CZ\020;\022\006\n\002DK\020<\022\006" +
      "\n\002DJ\020=\022\006\n\002DM\020>\022\006\n\002DO\020?\022\006\n\002EC\020@\022\006\n\002EG\020A\022\006" +
      "\n\002SV\020B\022\006\n\002GQ\020C\022\006\n\002ER\020D\022\006\n\002EE\020E\022\006\n\002ET\020F\022\006" +
      "\n\002FK\020G\022\006\n\002FO\020H\022\006\n\002FJ\020I\022\006\n\002FI\020J\022\006\n\002FR\020K\022\006" +
      "\n\002GF\020L\022\006\n\002PF\020M\022\006\n\002TF\020N\022\006\n\002GA\020O\022\006\n\002GM\020P\022\006" +
      "\n\002GE\020Q\022\006\n\002DE\020R\022\006\n\002GH\020S\022\006\n\002GI\020T\022\006\n\002GR\020U\022\006" +
      "\n\002GL\020V\022\006\n\002GD\020W\022\006\n\002GP\020X\022\006\n\002GU\020Y\022\006\n\002GT\020Z\022\006" +
      "\n\002GG\020[\022\006\n\002GN\020\\\022\006\n\002GW\020]\022\006\n\002GY\020^\022\006\n\002HT\020_\022\006" +
      "\n\002HM\020`\022\006\n\002VA\020a\022\006\n\002HN\020b\022\006\n\002HK\020c\022\006\n\002HU\020d\022\006" +
      "\n\002IS\020e\022\006\n\002IN\020f\022\006\n\002ID\020g\022\006\n\002IR\020h\022\006\n\002IQ\020i\022\006" +
      "\n\002IE\020j\022\006\n\002IM\020k\022\006\n\002IL\020l\022\006\n\002IT\020m\022\006\n\002JM\020n\022\006" +
      "\n\002JP\020o\022\006\n\002JE\020p\022\006\n\002JO\020q\022\006\n\002KZ\020r\022\006\n\002KE\020s\022\006" +
      "\n\002KI\020t\022\006\n\002KP\020u\022\006\n\002KR\020v\022\006\n\002KW\020w\022\006\n\002KG\020x\022\006" +
      "\n\002LA\020y\022\006\n\002LV\020z\022\006\n\002LB\020{\022\006\n\002LS\020|\022\006\n\002LR\020}\022\006" +
      "\n\002LY\020~\022\006\n\002LI\020\177\022\007\n\002LT\020\200\001\022\007\n\002LU\020\201\001\022\007\n\002MO\020\202" +
      "\001\022\007\n\002MK\020\203\001\022\007\n\002MG\020\204\001\022\007\n\002MW\020\205\001\022\007\n\002MY\020\206\001\022\007\n" +
      "\002MV\020\207\001\022\007\n\002ML\020\210\001\022\007\n\002MT\020\211\001\022\007\n\002MH\020\212\001\022\007\n\002MQ\020" +
      "\213\001\022\007\n\002MR\020\214\001\022\007\n\002MU\020\215\001\022\007\n\002YT\020\216\001\022\007\n\002MX\020\217\001\022\007" +
      "\n\002FM\020\220\001\022\007\n\002MD\020\221\001\022\007\n\002MC\020\222\001\022\007\n\002MN\020\223\001\022\007\n\002ME" +
      "\020\224\001\022\007\n\002MS\020\225\001\022\007\n\002MA\020\226\001\022\007\n\002MZ\020\227\001\022\007\n\002MM\020\230\001\022" +
      "\007\n\002NA\020\231\001\022\007\n\002NR\020\232\001\022\007\n\002NP\020\233\001\022\007\n\002NL\020\234\001\022\007\n\002N" +
      "C\020\235\001\022\007\n\002NZ\020\236\001\022\007\n\002NI\020\237\001\022\007\n\002NE\020\240\001\022\007\n\002NG\020\241\001" +
      "\022\007\n\002NU\020\242\001\022\007\n\002NF\020\243\001\022\007\n\002MP\020\244\001\022\007\n\002NO\020\245\001\022\007\n\002" +
      "OM\020\246\001\022\007\n\002PK\020\247\001\022\007\n\002PW\020\250\001\022\007\n\002PS\020\251\001\022\007\n\002PA\020\252" +
      "\001\022\007\n\002PG\020\253\001\022\007\n\002PY\020\254\001\022\007\n\002PE\020\255\001\022\007\n\002PH\020\256\001\022\007\n" +
      "\002PN\020\257\001\022\007\n\002PL\020\260\001\022\007\n\002PT\020\261\001\022\007\n\002PR\020\262\001\022\007\n\002QA\020" +
      "\263\001\022\007\n\002RE\020\264\001\022\007\n\002RO\020\265\001\022\007\n\002RU\020\266\001\022\007\n\002RW\020\267\001\022\007" +
      "\n\002BL\020\270\001\022\007\n\002SH\020\271\001\022\007\n\002KN\020\272\001\022\007\n\002LC\020\273\001\022\007\n\002MF" +
      "\020\274\001\022\007\n\002PM\020\275\001\022\007\n\002VC\020\276\001\022\007\n\002WS\020\277\001\022\007\n\002SM\020\300\001\022" +
      "\007\n\002ST\020\301\001\022\007\n\002SA\020\302\001\022\007\n\002SN\020\303\001\022\007\n\002RS\020\304\001\022\007\n\002S" +
      "C\020\305\001\022\007\n\002SL\020\306\001\022\007\n\002SG\020\307\001\022\007\n\002SX\020\310\001\022\007\n\002SK\020\311\001" +
      "\022\007\n\002SI\020\312\001\022\007\n\002SB\020\313\001\022\007\n\002SO\020\314\001\022\007\n\002ZA\020\315\001\022\007\n\002" +
      "GS\020\316\001\022\007\n\002SS\020\317\001\022\007\n\002ES\020\320\001\022\007\n\002LK\020\321\001\022\007\n\002SD\020\322" +
      "\001\022\007\n\002SR\020\323\001\022\007\n\002SJ\020\324\001\022\007\n\002SZ\020\325\001\022\007\n\002SE\020\326\001\022\007\n" +
      "\002CH\020\327\001\022\007\n\002SY\020\330\001\022\007\n\002TW\020\331\001\022\007\n\002TJ\020\332\001\022\007\n\002TZ\020" +
      "\333\001\022\007\n\002TH\020\334\001\022\007\n\002TL\020\335\001\022\007\n\002TG\020\336\001\022\007\n\002TK\020\337\001\022\007" +
      "\n\002TO\020\340\001\022\007\n\002TT\020\341\001\022\007\n\002TN\020\342\001\022\007\n\002TR\020\343\001\022\007\n\002TM" +
      "\020\344\001\022\007\n\002TC\020\345\001\022\007\n\002TV\020\346\001\022\007\n\002UG\020\347\001\022\007\n\002UA\020\350\001\022" +
      "\007\n\002AE\020\351\001\022\007\n\002GB\020\352\001\022\007\n\002US\020\353\001\022\007\n\002UM\020\354\001\022\007\n\002U" +
      "Y\020\355\001\022\007\n\002UZ\020\356\001\022\007\n\002VU\020\357\001\022\007\n\002VE\020\360\001\022\007\n\002VN\020\361\001" +
      "\022\007\n\002VG\020\362\001\022\007\n\002VI\020\363\001\022\007\n\002WF\020\364\001\022\007\n\002EH\020\365\001\022\007\n\002" +
      "YE\020\366\001\022\007\n\002ZM\020\367\001\022\007\n\002ZW\020\370\001B)Z\'workstream_pr" +
      "otocol/common/country_codeb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
